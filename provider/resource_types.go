package provider

import (
	"github.com/opengovern/og-aws-describer-new/provider/describer"
	"github.com/opengovern/og-util/pkg/source"
)

var resourceTypes = map[string]ResourceType{

	"AWS::Redshift::Snapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Redshift::Snapshot",
		ResourceLabel:        "Snapshot",
		Tags:                 map[string][]string{},
		ServiceName:          "Redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftSnapshot),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetRedshiftSnapshot),
		TerraformName:        []string{"aws_redshift_cluster_snapshot"},
		TerraformServiceName: "redshift",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::AccountSummary": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::AccountSummary",
		ResourceLabel:        "IAM Account Summary",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMAccountSummary),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glacier::Vault": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glacier::Vault",
		ResourceLabel:        "Glacier Vault",
		Tags:                 map[string][]string{},
		ServiceName:          "Glacier",
		ListDescriber:        ParallelDescribeRegional(describer.GlacierVault),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetGlacierVault),
		TerraformName:        []string{"aws_glacier_vault"},
		TerraformServiceName: "glacier",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Organizations::Organization": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::Organization",
		ResourceLabel:        "Organizations",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsOrganization),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_organizations_organization"},
		TerraformServiceName: "organizations",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Organizations::Policy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::Policy",
		ResourceLabel:        "Organizations",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_organizations_policy"},
		TerraformServiceName: "organizations",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Organizations::PolicyTarget": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::PolicyTarget",
		ResourceLabel:        "Organizations",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsPolicyTarget),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_organizations_policy"},
		TerraformServiceName: "organizations",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Organizations::OrganizationalUnit": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::OrganizationalUnit",
		ResourceLabel:        "Organizations",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsOrganizationalUnit),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_organizations_organizational_unit"},
		TerraformServiceName: "organizations",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Organizations::Root": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::Root",
		ResourceLabel:        "Organizations",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsRoot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_organizations_root"},
		TerraformServiceName: "organizations",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::CloudSearch::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudSearch::Domain",
		ResourceLabel:        "CloudSearch",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudSearch",
		ListDescriber:        ParallelDescribeRegional(describer.CloudSearchDomain),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudsearch_domain"},
		TerraformServiceName: "cloudsearch",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDb::GlobalSecondaryIndex": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDb::GlobalSecondaryIndex",
		ResourceLabel:        "DynamoDB Global Secondary Index",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbGlobalSecondaryIndex),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetDynamoDbGlobalSecondaryIndex),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::RouteTable": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::RouteTable",
		ResourceLabel: "Route Tables",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Route53RouteTable.svg"},
		},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2RouteTable),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2RouteTable),
		TerraformName:        []string{"aws_route_table"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::SecurityHub::Hub": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::Hub",
		ResourceLabel:        "Security Hub",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubHub),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::StorageGateway::StorageGateway": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::StorageGateway::StorageGateway",
		ResourceLabel:        "Storage Gateway",
		Tags:                 map[string][]string{},
		ServiceName:          "StorageGateway",
		ListDescriber:        ParallelDescribeRegional(describer.StorageGatewayStorageGateway),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_storagegateway_gateway"},
		TerraformServiceName: "storagegateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector::AssessmentTemplate": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector::AssessmentTemplate",
		ResourceLabel:        "Inspector Assessment Template",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector",
		ListDescriber:        ParallelDescribeRegional(describer.InspectorAssessmentTemplate),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetInspectorAssessmentTemplate),
		TerraformName:        []string{"aws_inspector_assessment_template"},
		TerraformServiceName: "inspector",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancingV2::ListenerRule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticLoadBalancingV2::ListenerRule",
		ResourceLabel:        "ELBv2 Listener Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingV2ListenerRule),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_alb_listener_rule"},
		TerraformServiceName: "elbv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::Role": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::IAM::Role",
		ResourceLabel: "IAM Roles",
		Tags: map[string][]string{
			"category": {"Management & Governance"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/IdentityAccessManagementRole.svg"},
		},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMRole),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_role"},
		TerraformServiceName: "iam",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Backup::ProtectedResource": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::ProtectedResource",
		ResourceLabel:        "Backup Protected Resource",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupProtectedResource),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeCommit::Repository": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeCommit::Repository",
		ResourceLabel:        "CodeCommit Repository",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeCommit",
		ListDescriber:        ParallelDescribeRegional(describer.CodeCommitRepository),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_codecommit_repository"},
		TerraformServiceName: "codecommit",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VPCEndpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VPCEndpoint",
		ResourceLabel:        "VPC Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPCEndpoint),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VPCEndpoint),
		TerraformName:        []string{"aws_vpc_endpoint"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EventBridge::EventRule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EventBridge::EventRule",
		ResourceLabel:        "EventBridge Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "EventBridge",
		ListDescriber:        ParallelDescribeRegional(describer.EventBridgeRule),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::OriginAccessControl": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::OriginAccessControl",
		ResourceLabel:        "Origin Access Control",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontOriginAccessControl),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_origin_access_control"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeBuild::Project": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeBuild::Project",
		ResourceLabel:        "CodeBuild Project",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeBuild",
		ListDescriber:        ParallelDescribeRegional(describer.CodeBuildProject),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetCodeBuildProject),
		TerraformName:        []string{"aws_codebuild_project"},
		TerraformServiceName: "codebuild",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeBuild::Build": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeBuild::Build",
		ResourceLabel:        "CodeBuild Build",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeBuild",
		ListDescriber:        ParallelDescribeRegional(describer.CodeBuildBuild),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetCodeBuildBuild),
		TerraformName:        []string{"aws_codebuild_build"},
		TerraformServiceName: "codebuild",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElastiCache::ParameterGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElastiCache::ParameterGroup",
		ResourceLabel:        "ElastiCache Parameter Group",
		Tags:                 map[string][]string{},
		ServiceName:          "ElastiCache",
		ListDescriber:        ParallelDescribeRegional(describer.ElastiCacheParameterGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elasticache_parameter_group"},
		TerraformServiceName: "elasticache",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::MemoryDb::Cluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::MemoryDb::Cluster",
		ResourceLabel:        "MemoryDB Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "MemoryDb",
		ListDescriber:        ParallelDescribeRegional(describer.MemoryDbCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_memorydb_cluster"},
		TerraformServiceName: "memorydb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::Crawler": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::Crawler",
		ResourceLabel:        "Glue Crawler",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueCrawler),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetGlueCrawler),
		TerraformName:        []string{"aws_glue_crawler"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DirectConnect::Gateway": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DirectConnect::Gateway",
		ResourceLabel:        "Gateway",
		Tags:                 map[string][]string{},
		ServiceName:          "DirectConnect",
		ListDescriber:        ParallelDescribeRegional(describer.DirectConnectGateway),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dx_gateway"},
		TerraformServiceName: "directconnect",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDb::BackUp": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDb::BackUp",
		ResourceLabel:        "DynamoDB BackUp",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbBackUp),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::EIP": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::EIP",
		ResourceLabel:        "Elastic (Public) IPs",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2EIP),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2EIP),
		TerraformName:        []string{"aws_eip"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::InternetGateway": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::InternetGateway",
		ResourceLabel: "Internet Gateways",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/InternetGateway.svg"},
		},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2InternetGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2InternetGateway),
		TerraformName:        []string{"aws_internet_gateway"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::GuardDuty::PublishingDestination": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::PublishingDestination",
		ResourceLabel:        "GuardDuty Publishing Destination",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyPublishingDestination),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_publishing_destination"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::KinesisAnalyticsV2::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::KinesisAnalyticsV2::Application",
		ResourceLabel:        "Kinesis Analytics V2 Application",
		Tags:                 map[string][]string{},
		ServiceName:          "KinesisAnalyticsV2",
		ListDescriber:        ParallelDescribeRegional(describer.KinesisAnalyticsV2Application),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kinesisanalyticsv2_application"},
		TerraformServiceName: "kinesisanalyticsv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EMR::Instance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EMR::Instance",
		ResourceLabel:        "EMR Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticMapReduce",
		ListDescriber:        ParallelDescribeRegional(describer.EMRInstance),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EMR::BlockPublicAccessConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EMR::BlockPublicAccessConfiguration",
		ResourceLabel:        "EMR Block Public Access Configuration",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticMapReduce",
		ListDescriber:        ParallelDescribeRegional(describer.EMRBlockPublicAccessConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGateway::RestApi": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ApiGateway::RestApi",
		ResourceLabel: "Rest APIs",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ApiGateway.svg"},
		},
		ServiceName:          "apigateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayRestAPI),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayRestAPI),
		TerraformName:        []string{"aws_api_gateway_rest_api"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ApiGatewayV2::Integration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGatewayV2::Integration",
		ResourceLabel:        "API Gateway V2 Integration",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayV2Integration),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayV2Integration),
		TerraformName:        []string{"aws_apigatewayv2_integration"},
		TerraformServiceName: "apigatewayv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AutoScaling::AutoScalingGroup": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::AutoScaling::AutoScalingGroup",
		ResourceLabel: "Autoscaling Groups",
		Tags: map[string][]string{
			"category": {"Compute"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Ec2AutoScaling.svg"},
		},
		ServiceName:          "AutoScaling",
		ListDescriber:        ParallelDescribeRegional(describer.AutoScalingAutoScalingGroup),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetAutoScalingAutoScalingGroup),
		TerraformName:        []string{"aws_autoscaling_group"},
		TerraformServiceName: "autoscaling",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::DynamoDb::TableExport": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDb::TableExport",
		ResourceLabel:        "DynamoDB Table Export",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbTableExport),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::KeyPair": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::KeyPair",
		ResourceLabel:        "AWS SSH Access Keys",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Other",
		ListDescriber:        ParallelDescribeRegional(describer.EC2KeyPair),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2KeyPair),
		TerraformName:        []string{"aws_key_pairs"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EFS::FileSystem": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EFS::FileSystem",
		ResourceLabel: "EFS File Systems",
		Tags: map[string][]string{
			"category": {"Storage"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticFileSystem.svg"},
		},
		ServiceName:          "ElasticFileSystem",
		ListDescriber:        ParallelDescribeRegional(describer.EFSFileSystem),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_efs_file_system"},
		TerraformServiceName: "efs",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Kafka::Cluster": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::Kafka::Cluster",
		ResourceLabel: "Kafka Clusters",
		Tags: map[string][]string{
			"category": {"PaaS"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ManagedStreamingForKafka.svg"},
		},
		ServiceName:          "Kafka",
		ListDescriber:        ParallelDescribeRegional(describer.KafkaCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_msk_cluster"},
		TerraformServiceName: "kafka",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecretsManager::Secret": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecretsManager::Secret",
		ResourceLabel:        "Secrets",
		Tags:                 map[string][]string{},
		ServiceName:          "SecretsManager",
		ListDescriber:        ParallelDescribeRegional(describer.SecretsManagerSecret),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_secretsmanager_secret"},
		TerraformServiceName: "secretsmanager",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::LegalHold": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::LegalHold",
		ResourceLabel:        "Backup Legal Hold",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupLegalHold),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::Function": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::Function",
		ResourceLabel:        "CloudFront Functions",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontFunction),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_function"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GlobalAccelerator::EndpointGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GlobalAccelerator::EndpointGroup",
		ResourceLabel:        "Global Accelerator Endpoint Group",
		Tags:                 map[string][]string{},
		ServiceName:          "GlobalAccelerator",
		ListDescriber:        ParallelDescribeRegional(describer.GlobalAcceleratorEndpointGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_globalaccelerator_endpoint_group"},
		TerraformServiceName: "globalaccelerator",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DAX::ParameterGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DAX::ParameterGroup",
		ResourceLabel:        "DAx Parameter Group",
		Tags:                 map[string][]string{},
		ServiceName:          "DAX",
		ListDescriber:        ParallelDescribeRegional(describer.DAXParameterGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dax_parameter_group"},
		TerraformServiceName: "dax",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SQS::Queue": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SQS::Queue",
		ResourceLabel:        "SQS Queues",
		Tags:                 map[string][]string{},
		ServiceName:          "SQS",
		ListDescriber:        ParallelDescribeRegional(describer.SQSQueue),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sqs_queue"},
		TerraformServiceName: "sqs",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Config::Rule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Config::Rule",
		ResourceLabel:        "Config Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "Config",
		ListDescriber:        ParallelDescribeRegional(describer.ConfigRule),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_config_config_rule"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GuardDuty::Member": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::Member",
		ResourceLabel:        "GuardDuty Member",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyMember),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_member"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector::Exclusion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector::Exclusion",
		ResourceLabel:        "Inspector Exclusion",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector",
		ListDescriber:        ParallelDescribeRegional(describer.InspectorExclusion),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DirectoryService::Directory": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DirectoryService::Directory",
		ResourceLabel:        "Directory Service Directory",
		Tags:                 map[string][]string{},
		ServiceName:          "DirectoryService",
		ListDescriber:        ParallelDescribeRegional(describer.DirectoryServiceDirectory),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_directory_service_directory"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DirectoryService::Certificate": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DirectoryService::Certificate",
		ResourceLabel:        "Directory Service Certificate",
		Tags:                 map[string][]string{},
		ServiceName:          "DirectoryService",
		ListDescriber:        ParallelDescribeRegional(describer.DirectoryServiceCertificate),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DirectoryService::LogSubscription": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DirectoryService::LogSubscription",
		ResourceLabel:        "Directory Service Log Subscription",
		Tags:                 map[string][]string{},
		ServiceName:          "DirectoryService",
		ListDescriber:        ParallelDescribeRegional(describer.DirectoryServiceLogSubscription),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EFS::AccessPoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EFS::AccessPoint",
		ResourceLabel:        "EFS Access Point",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticFileSystem",
		ListDescriber:        ParallelDescribeRegional(describer.EFSAccessPoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_efs_access_point"},
		TerraformServiceName: "efs",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::PolicyAttachment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::PolicyAttachment",
		ResourceLabel:        "IAM Policy Attachment",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMPolicyAttachment),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_group_policy_attachment"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::CredentialReport": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::CredentialReport",
		ResourceLabel:        "IAM Credential Report",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMCredentialReport),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::GlobalCluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::GlobalCluster",
		ResourceLabel:        "RDS Global Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSGlobalCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_rds_global_cluster"},
		TerraformServiceName: "rds",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::GuardDuty::Detector": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::Detector",
		ResourceLabel:        "GuardDuty Detector",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyDetector),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_detector"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SNS::Topic": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SNS::Topic",
		ResourceLabel:        "SNS Topics",
		Tags:                 map[string][]string{},
		ServiceName:          "SNS",
		ListDescriber:        ParallelDescribeRegional(describer.SNSTopic),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sns_topic"},
		TerraformServiceName: "sns",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::AppConfig::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AppConfig::Application",
		ResourceLabel:        "AppConfig Application",
		Tags:                 map[string][]string{},
		ServiceName:          "AppConfig",
		ListDescriber:        ParallelDescribeRegional(describer.AppConfigApplication),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_appconfig_application"},
		TerraformServiceName: "appconfig",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Batch::Job": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Batch::Job",
		ResourceLabel:        "Batch Jobs",
		Tags:                 map[string][]string{},
		ServiceName:          "Batch",
		ListDescriber:        ParallelDescribeRegional(describer.BatchJob),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_batch_job_definition"},
		TerraformServiceName: "batch",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Batch::JobQueue": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Batch::JobQueue",
		ResourceLabel:        "Batch Job Queues",
		Tags:                 map[string][]string{},
		ServiceName:          "Batch",
		ListDescriber:        ParallelDescribeRegional(describer.BatchJobQueue),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECS::Service": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::Service",
		ResourceLabel:        "ECS Services",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSService),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetECSService),
		TerraformName:        []string{"aws_ecs_service"},
		TerraformServiceName: "ecs",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::FSX::Task": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::FSX::Task",
		ResourceLabel:        "FSX Task",
		Tags:                 map[string][]string{},
		ServiceName:          "FSX",
		ListDescriber:        ParallelDescribeRegional(describer.FSXTask),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::VirtualMFADevice": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::VirtualMFADevice",
		ResourceLabel:        "Virtual MFA Device",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMVirtualMFADevice),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_virtual_mfa_device"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFv2::WebACL": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFv2::WebACL",
		ResourceLabel:        "WAF (v2) WebACL",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFv2WebACL),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_wafv2_web_acl"},
		TerraformServiceName: "wafv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApplicationAutoScaling::Target": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApplicationAutoScaling::Target",
		ResourceLabel:        "Application AutoScaling Target",
		Tags:                 map[string][]string{},
		ServiceName:          "ApplicationAutoScaling",
		ListDescriber:        ParallelDescribeRegional(describer.ApplicationAutoScalingTarget),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_appautoscaling_target"},
		TerraformServiceName: "appautoscaling",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApplicationAutoScaling::Policy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApplicationAutoScaling::Policy",
		ResourceLabel:        "Application AutoScaling Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "ApplicationAutoScaling",
		ListDescriber:        ParallelDescribeRegional(describer.ApplicationAutoScalingPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_appautoscaling_policy"},
		TerraformServiceName: "appautoscaling",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::Vault": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::Vault",
		ResourceLabel:        "Backup Vaults",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupVault),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_backup_vault"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElastiCache::Cluster": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ElastiCache::Cluster",
		ResourceLabel: "ElasticCache Clusters",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElastiCache.svg"},
		},
		ServiceName:          "ElastiCache",
		ListDescriber:        ParallelDescribeRegional(describer.ElastiCacheCluster),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetElastiCacheCluster),
		TerraformName:        []string{"aws_elasticache_cluster"},
		TerraformServiceName: "elasticache",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Logs::LogGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Logs::LogGroup",
		ResourceLabel:        "Log Group",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudWatch",
		ListDescriber:        ParallelDescribeRegional(describer.CloudWatchLogsLogGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudwatch_log_group"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::S3::Bucket": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::S3::Bucket",
		ResourceLabel: "S3 Buckets",
		Tags: map[string][]string{
			"category": {"Storage"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/SimpleStorageBucket.svg"},
		},
		ServiceName:          "S3",
		ListDescriber:        SequentialDescribeGlobal(describer.S3Bucket),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_s3_bucket"},
		TerraformServiceName: "s3",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::S3::BucketIntelligentTieringConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::S3::BucketIntelligentTieringConfiguration",
		ResourceLabel:        "S3 Buckets",
		Tags:                 map[string][]string{},
		ServiceName:          "S3",
		ListDescriber:        SequentialDescribeGlobal(describer.S3BucketIntelligentTieringConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_s3_bucket_intelligent_tiering_configuration"},
		TerraformServiceName: "s3",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::S3::MultiRegionAccessPoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::S3::MultiRegionAccessPoint",
		ResourceLabel:        "S3 Buckets",
		Tags:                 map[string][]string{},
		ServiceName:          "S3",
		ListDescriber:        SequentialDescribeGlobal(describer.S3MultiRegionAccessPoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_s3_multi_region_access_point"},
		TerraformServiceName: "s3",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CertificateManager::Certificate": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CertificateManager::Certificate",
		ResourceLabel:        "TLS/SSL Certicates",
		Tags:                 map[string][]string{},
		ServiceName:          "ACM",
		ListDescriber:        ParallelDescribeRegional(describer.CertificateManagerCertificate),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_acm_certificate"},
		TerraformServiceName: "",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ApiGatewayV2::Api": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGatewayV2::Api",
		ResourceLabel:        "API Gateway API",
		Tags:                 map[string][]string{},
		ServiceName:          "apigateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayV2API),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayV2API),
		TerraformName:        []string{"aws_apigatewayv2_api"},
		TerraformServiceName: "apigatewayv2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::Volume": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::Volume",
		ResourceLabel: "Storage Volumes",
		Tags: map[string][]string{
			"category": {"Storage"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticBlockStoreVolume.svg"},
		},
		ServiceName:          "EC2.Storage",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Volume),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Volume),
		TerraformName:        []string{"aws_ebs_volume"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ApiGateway::ApiKey": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGateway::ApiKey",
		ResourceLabel:        "API Gateway API Keys",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayApiKey),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_api_gateway_api_key"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::Connection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::Connection",
		ResourceLabel:        "Glue Connection",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueConnection),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_connection"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ECS::Task": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::Task",
		ResourceLabel:        "ECS Task",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSTask),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::ManagedInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::ManagedInstance",
		ResourceLabel:        "SSM Managed Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMManagedInstance),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::Inventory": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::Inventory",
		ResourceLabel:        "SSM Inventory",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMInventory),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::InventoryEntry": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::InventoryEntry",
		ResourceLabel:        "SSM Inventory Entry",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMInventoryEntry),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::MaintenanceWindow": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::MaintenanceWindow",
		ResourceLabel:        "SSM Maintenance Window",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMMaintenanceWindow),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::PatchBaseline": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::PatchBaseline",
		ResourceLabel:        "SSM Patch Baseline",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMPatchBaseline),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::Parameter": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::Parameter",
		ResourceLabel:        "SSM Parameter",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMParameter),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ssm_parameter"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Lambda::Function": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::Lambda::Function",
		ResourceLabel: "Lambda Functions",
		Tags: map[string][]string{
			"category": {"Serverless"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Lambda.svg"},
		},
		ServiceName:          "lambda",
		ListDescriber:        ParallelDescribeRegional(describer.LambdaFunction),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetLambdaFunction),
		TerraformName:        []string{"aws_lambda_function"},
		TerraformServiceName: "lambda",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::RDS::DBSnapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBSnapshot",
		ResourceLabel:        "RDS Snapshots",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_db_snapshot"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeDeploy::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeDeploy::Application",
		ResourceLabel:        "CodeDeploy Application",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeDeploy",
		ListDescriber:        ParallelDescribeRegional(describer.CodeDeployApplication),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeDeploy::DeploymentConfig": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeDeploy::DeploymentConfig",
		ResourceLabel:        "CodeDeploy Deployment Config",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeDeploy",
		ListDescriber:        ParallelDescribeRegional(describer.CodeDeployDeploymentConfig),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EMR::Cluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EMR::Cluster",
		ResourceLabel:        "EMR Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticMapReduce",
		ListDescriber:        ParallelDescribeRegional(describer.EMRCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_emr_cluster"},
		TerraformServiceName: "emr",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::AccessKey": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::AccessKey",
		ResourceLabel:        "IAM Access Key",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMAccessKey),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_access_key"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::SSHPublicKey": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::SSHPublicKey",
		ResourceLabel:        "IAM SSH Public Key",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMSSHPublicKey),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_user_ssh_key"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::CatalogTable": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::CatalogTable",
		ResourceLabel:        "Glue Catalog Table",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueCatalogTable),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_catalog_table"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudTrail::Channel": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudTrail::Channel",
		ResourceLabel:        "CloudTrail Channel",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudTrail",
		ListDescriber:        ParallelDescribeRegional(describer.CloudTrailChannel),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::NetworkAcl": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::NetworkAcl",
		ResourceLabel:        "Network ACLs",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.NetworkSecurity",
		ListDescriber:        ParallelDescribeRegional(describer.EC2NetworkAcl),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2NetworkAcl),
		TerraformName:        []string{"aws_network_acl"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECS::ContainerInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::ContainerInstance",
		ResourceLabel:        "ECS Container Instances",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSContainerInstance),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RedshiftServerless::Snapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RedshiftServerless::Snapshot",
		ResourceLabel:        "Redshift Serverless Snapshot",
		Tags:                 map[string][]string{},
		ServiceName:          "RedshiftServerless",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftServerlessSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_redshiftserverless_snapshot"},
		TerraformServiceName: "redshiftserverless",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Workspaces::Bundle": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Workspaces::Bundle",
		ResourceLabel:        "Workspaces Bundle",
		Tags:                 map[string][]string{},
		ServiceName:          "Workspaces",
		ListDescriber:        ParallelDescribeRegional(describer.WorkspacesBundle),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_workspaces_bundle"},
		TerraformServiceName: "workspaces",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudTrail::Trail": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudTrail::Trail",
		ResourceLabel:        "CloudTrail Trail",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudTrail",
		ListDescriber:        ParallelDescribeRegional(describer.CloudTrailTrail),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudtrail"},
		TerraformServiceName: "cloudtrail",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::DAX::Parameter": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DAX::Parameter",
		ResourceLabel:        "DAx Parameter",
		Tags:                 map[string][]string{},
		ServiceName:          "DAX",
		ListDescriber:        ParallelDescribeRegional(describer.DAXParameter),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ECR::Image": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECR::Image",
		ResourceLabel:        "ECR Image",
		Tags:                 map[string][]string{},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRImage),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecr_image"},
		TerraformServiceName: "ecr",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::ServerCertificate": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::ServerCertificate",
		ResourceLabel:        "IAM Server Certificate",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMServerCertificate),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_server_certificate"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Keyspaces::Keyspace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Keyspaces::Keyspace",
		ResourceLabel:        "AWS Keyspace",
		Tags:                 map[string][]string{},
		ServiceName:          "Keyspaces",
		ListDescriber:        ParallelDescribeRegional(describer.KeyspacesKeyspace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_keyspaces_keyspace"},
		TerraformServiceName: "keyspaces",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::S3::AccessPoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::S3::AccessPoint",
		ResourceLabel:        "S3 Access Point",
		Tags:                 map[string][]string{},
		ServiceName:          "S3",
		ListDescriber:        ParallelDescribeRegional(describer.S3AccessPoint),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::EndpointConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::EndpointConfiguration",
		ResourceLabel:        "SageMaker Endpoint Configuration",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerEndpointConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sagemaker_endpoint_configuration"},
		TerraformServiceName: "sagemaker",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElastiCache::ReservedCacheNode": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElastiCache::ReservedCacheNode",
		ResourceLabel:        "ElasticCache Reserved Cache Node",
		Tags:                 map[string][]string{},
		ServiceName:          "ElastiCache",
		ListDescriber:        ParallelDescribeRegional(describer.ElastiCacheReservedCacheNode),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EMR::InstanceFleet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EMR::InstanceFleet",
		ResourceLabel:        "EMR Instance Fleet",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticMapReduce",
		ListDescriber:        ParallelDescribeRegional(describer.EMRInstanceFleet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_emr_instance_fleet"},
		TerraformServiceName: "emr",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Account::Account": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Account::Account",
		ResourceLabel:        "Account",
		Tags:                 map[string][]string{},
		ServiceName:          "Organizations",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMAccount),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VPCPeeringConnection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VPCPeeringConnection",
		ResourceLabel:        "VPC Peering Connection",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPCPeeringConnection),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VPCPeeringConnection),
		TerraformName:        []string{"aws_vpc_peering_connection"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EKS::FargateProfile": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EKS::FargateProfile",
		ResourceLabel:        "EKS Fargate Profile",
		Tags:                 map[string][]string{},
		ServiceName:          "EKS",
		ListDescriber:        ParallelDescribeRegional(describer.EKSFargateProfile),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_eks_fargate_profile"},
		TerraformServiceName: "eks",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::AccountPasswordPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::AccountPasswordPolicy",
		ResourceLabel:        "IAM Account Password Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMAccountPasswordPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_account_password_policy"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodePipeline::Pipeline": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodePipeline::Pipeline",
		ResourceLabel:        "Code Pipeline",
		Tags:                 map[string][]string{},
		ServiceName:          "CodePipeline",
		ListDescriber:        ParallelDescribeRegional(describer.CodePipelinePipeline),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_codepipeline"},
		TerraformServiceName: "codepipeline",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DAX::Cluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DAX::Cluster",
		ResourceLabel:        "DAX Cluster",
		Tags:                 map[string][]string{},
		ServiceName:          "DAX",
		ListDescriber:        ParallelDescribeRegional(describer.DAXCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dax_cluster"},
		TerraformServiceName: "dax",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DLM::LifecyclePolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DLM::LifecyclePolicy",
		ResourceLabel:        "DLM Lifecycle Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "DLM",
		ListDescriber:        ParallelDescribeRegional(describer.DLMLifecyclePolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dlm_lifecycle_policy"},
		TerraformServiceName: "dlm",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::OpsWorksCM::Server": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::OpsWorksCM::Server",
		ResourceLabel:        "OpsWorks CM Server",
		Tags:                 map[string][]string{},
		ServiceName:          "OpsWorksCM",
		ListDescriber:        ParallelDescribeRegional(describer.OpsWorksCMServer),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AccessAnalyzer::Analyzer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AccessAnalyzer::Analyzer",
		ResourceLabel:        "Access Analyzer",
		Tags:                 map[string][]string{},
		ServiceName:          "AccessAnalyzer",
		ListDescriber:        ParallelDescribeRegional(describer.AccessAnalyzerAnalyzer),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetAccessAnalyzerAnalyzer),
		TerraformName:        []string{"aws_accessanalyzer_analyzer"},
		TerraformServiceName: "accessanalyzer",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AccessAnalyzer::Finding": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AccessAnalyzer::Finding",
		ResourceLabel:        "Access Analyzer Finding",
		Tags:                 map[string][]string{},
		ServiceName:          "AccessAnalyzer",
		ListDescriber:        ParallelDescribeRegional(describer.AccessAnalyzerAnalyzerFinding),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "accessanalyzer",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElastiCache::SubnetGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElastiCache::SubnetGroup",
		ResourceLabel:        "ElasticCache Subnet Group",
		Tags:                 map[string][]string{},
		ServiceName:          "ElastiCache",
		ListDescriber:        ParallelDescribeRegional(describer.ElastiCacheSubnetGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elasticache_subnet_group"},
		TerraformServiceName: "elasticache",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::FSX::Volume": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::FSX::Volume",
		ResourceLabel:        "FSX Volume",
		Tags:                 map[string][]string{},
		ServiceName:          "FSX",
		ListDescriber:        ParallelDescribeRegional(describer.FSXVolume),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_fsx_ontap_volume"},
		TerraformServiceName: "fsx",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Amplify::App": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Amplify::App",
		ResourceLabel:        "Amplify App",
		Tags:                 map[string][]string{},
		ServiceName:          "Amplify",
		ListDescriber:        ParallelDescribeRegional(describer.AmplifyApp),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_amplify_app"},
		TerraformServiceName: "amplify",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudTrail::Query": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudTrail::Query",
		ResourceLabel:        "CloudTrail Query",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudTrail",
		ListDescriber:        ParallelDescribeRegional(describer.CloudTrailQuery),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ECR::PublicRegistry": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECR::PublicRegistry",
		ResourceLabel:        "ECR Public Registry",
		Tags:                 map[string][]string{},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRPublicRegistry),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::NetworkInterface": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::NetworkInterface",
		ResourceLabel:        "Network Interfaces",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2NetworkInterface),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2NetworkInterface),
		TerraformName:        []string{"aws_network_interface"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::VPNConnection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VPNConnection",
		ResourceLabel:        "VPN Connection",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPNConnection),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VPNConnection),
		TerraformName:        []string{"aws_vpn_connection"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::FSX::StorageVirtualMachine": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::FSX::StorageVirtualMachine",
		ResourceLabel:        "FSX Storage VMs",
		Tags:                 map[string][]string{},
		ServiceName:          "FSX",
		ListDescriber:        ParallelDescribeRegional(describer.FSXStorageVirtualMachine),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_fsx_ontap_storage_virtual_machine"},
		TerraformServiceName: "fsx",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGateway::Authorizer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGateway::Authorizer",
		ResourceLabel:        "API Gateway Authorizer",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayAuthorizer),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_api_gateway_authorizer"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AppStream::Stack": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AppStream::Stack",
		ResourceLabel:        "AppStream Stack",
		Tags:                 map[string][]string{},
		ServiceName:          "AppStream",
		ListDescriber:        ParallelDescribeRegional(describer.AppStreamStack),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_appstream_stack"},
		TerraformServiceName: "appstream",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Athena::WorkGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Athena::WorkGroup",
		ResourceLabel:        "Athena Workgroup",
		Tags:                 map[string][]string{},
		ServiceName:          "Athena",
		ListDescriber:        ParallelDescribeRegional(describer.AthenaWrokgroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_athena_workgroup"},
		TerraformServiceName: "athena",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Athena::QueryExecution": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Athena::QueryExecution",
		ResourceLabel:        "Athenea Query Execution",
		Tags:                 map[string][]string{},
		ServiceName:          "Athena",
		ListDescriber:        ParallelDescribeRegional(describer.AthenaQueryExecution),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "athena",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AppStream::Image": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AppStream::Image",
		ResourceLabel:        "AppStream Image",
		Tags:                 map[string][]string{},
		ServiceName:          "AppStream",
		ListDescriber:        ParallelDescribeRegional(describer.AppStreamImage),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetAppStreamImage),
		TerraformName:        []string{"aws_appstream_image"},
		TerraformServiceName: "appstream",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudWatch::Alarm": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudWatch::Alarm",
		ResourceLabel:        "CloudWatch Alarm",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudWatch",
		ListDescriber:        ParallelDescribeRegional(describer.CloudWatchAlarm),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetCloudWatchAlarm),
		TerraformName:        []string{"aws_cloudwatch_metric_alarm"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudWatch::LogSubscriptionFilter": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudWatch::LogSubscriptionFilter",
		ResourceLabel:        "CloudWatch Log Subscription Filter",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudWatch",
		ListDescriber:        SequentialDescribeRegional(describer.CloudWatchLogsSubscriptionFilter),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBCluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBCluster",
		ResourceLabel:        "RDS Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBCluster),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetRDSDBCluster),
		TerraformName:        []string{"aws_rds_cluster"},
		TerraformServiceName: "rds",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::RDS::DBClusterSnapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBClusterSnapshot",
		ResourceLabel:        "RDs Cluster Snapshot",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBClusterSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_db_cluster_snapshot"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::Framework": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::Framework",
		ResourceLabel:        "Backup Framework",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupFramework),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_backup_framework"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeBuild::SourceCredential": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeBuild::SourceCredential",
		ResourceLabel:        "CodeBuild Source Credential",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeBuild",
		ListDescriber:        ParallelDescribeRegional(describer.CodeBuildSourceCredential),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_codebuild_source_credential"},
		TerraformServiceName: "codebuild",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::ServiceSpecificCredential": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::ServiceSpecificCredential",
		ResourceLabel:        "IAM Service Specific Credential",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMServiceSpecificCredential),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_service_specific_credential"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::CapacityReservationFleet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::CapacityReservationFleet",
		ResourceLabel:        "EC2 Capacity Reservation Fleet",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2CapacityReservationFleet),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2CapacityReservationFleet),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::NetworkFirewall::Firewall": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::NetworkFirewall::Firewall",
		ResourceLabel:        "AWS Firewalls",
		Tags:                 map[string][]string{},
		ServiceName:          "network-firewall",
		ListDescriber:        ParallelDescribeRegional(describer.NetworkFirewallFirewall),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_networkfirewall_firewall"},
		TerraformServiceName: "networkfirewall",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Workspaces::Workspace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Workspaces::Workspace",
		ResourceLabel:        "Workspace VDIs",
		Tags:                 map[string][]string{},
		ServiceName:          "Workspaces",
		ListDescriber:        ParallelDescribeRegional(describer.WorkspacesWorkspace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_workspaces_workspace"},
		TerraformServiceName: "workspaces",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticSearch::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticSearch::Domain",
		ResourceLabel:        "ElasticSearch Domain",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticSearch",
		ListDescriber:        ParallelDescribeRegional(describer.ESDomain),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elasticsearch_domain"},
		TerraformServiceName: "elasticsearch",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::RDS::DBInstance": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::RDS::DBInstance",
		ResourceLabel: "RDS DB Instances",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Rds.svg"},
		},
		ServiceName:          "rds",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBInstance),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetRDSDBInstance),
		TerraformName:        []string{"aws_db_instance"},
		TerraformServiceName: "rds",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::RDS::DBInstanceAutomatedBackup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBInstanceAutomatedBackup",
		ResourceLabel:        "RDS DB Instances Automated Backups",
		Tags:                 map[string][]string{},
		ServiceName:          "rds",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBInstanceAutomatedBackup),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetRDSDBInstanceAutomatedBackup),
		TerraformName:        []string{"aws_rds_db_instance_automated_backup"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EFS::MountTarget": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EFS::MountTarget",
		ResourceLabel:        "EFS Mount Target",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticFileSystem",
		ListDescriber:        ParallelDescribeRegional(describer.EFSMountTarget),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_efs_mount_target"},
		TerraformServiceName: "efs",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GlobalAccelerator::Listener": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GlobalAccelerator::Listener",
		ResourceLabel:        "Global Accelerator Listener",
		Tags:                 map[string][]string{},
		ServiceName:          "GlobalAccelerator",
		ListDescriber:        ParallelDescribeRegional(describer.GlobalAcceleratorListener),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_globalaccelerator_listener"},
		TerraformServiceName: "globalaccelerator",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EKS::Addon": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EKS::Addon",
		ResourceLabel:        "EKS Addon",
		Tags:                 map[string][]string{},
		ServiceName:          "EKS",
		ListDescriber:        ParallelDescribeRegional(describer.EKSAddon),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_eks_addon"},
		TerraformServiceName: "eks",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::Policy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::Policy",
		ResourceLabel:        "IAM Policies",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_policy"},
		TerraformServiceName: "iam",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Redshift::Cluster": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::Redshift::Cluster",
		ResourceLabel: "Redshift Clusters",
		Tags: map[string][]string{
			"category": {"Big Data"},
			"logo_uri": {""},
		},
		ServiceName:          "redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_redshift_cluster"},
		TerraformServiceName: "redshift",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::WAFRegional::Rule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFRegional::Rule",
		ResourceLabel:        "WAFF Regional Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "WAFRegional",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRegionalRule),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_wafregional_rule"},
		TerraformServiceName: "wafregional",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFRegional::RuleGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFRegional::RuleGroup",
		ResourceLabel:        "WAFF Regional Rule Group",
		Tags:                 map[string][]string{},
		ServiceName:          "WAFRegional",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRegionalRuleGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_wafregional_rule_group"},
		TerraformServiceName: "wafregional",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::DataCatalogEncryptionSettings": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::DataCatalogEncryptionSettings",
		ResourceLabel:        "Glue Data Catalog Encryption Settings",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueDataCatalogEncryptionSettings),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_data_catalog_encryption_settings"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::FlowLog": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::FlowLog",
		ResourceLabel:        "EC2 Flow Log",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2FlowLog),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2FlowLog),
		TerraformName:        []string{"aws_flow_log"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::IpamPool": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::IpamPool",
		ResourceLabel:        "IPAM Address Pool",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2IpamPool),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2IpamPool),
		TerraformName:        []string{"aws_vpc_ipam_pool"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::SamlProvider": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::SamlProvider",
		ResourceLabel:        "SAML Provider",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMSamlProvider),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_saml_provider"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53::HostedZone": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::HostedZone",
		ResourceLabel:        "DNS Zones",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53HostedZone),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_zone"},
		TerraformServiceName: "route53",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Route53::QueryLog": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::QueryLog",
		ResourceLabel:        "DNS Query Log",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53QueryLog),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_query_log"},
		TerraformServiceName: "route53",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::PlacementGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::PlacementGroup",
		ResourceLabel:        "EC2 Placement Group",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2PlacementGroup),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2PlacementGroup),
		TerraformName:        []string{"aws_placement_group"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::FSX::Snapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::FSX::Snapshot",
		ResourceLabel:        "FSX Snapshot",
		Tags:                 map[string][]string{},
		ServiceName:          "FSX",
		ListDescriber:        ParallelDescribeRegional(describer.FSXSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_fsx_openzfs_snapshot"},
		TerraformServiceName: "fsx",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::KMS::Key": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::KMS::Key",
		ResourceLabel:        "Cryptographic Keys",
		Tags:                 map[string][]string{},
		ServiceName:          "KMS",
		ListDescriber:        ParallelDescribeRegional(describer.KMSKey),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetKMSKey),
		TerraformName:        []string{"aws_kms_key"},
		TerraformServiceName: "kms",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::KMS::KeyRotation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::KMS::KeyRotation",
		ResourceLabel:        "Cryptographic Key Rotations",
		Tags:                 map[string][]string{},
		ServiceName:          "KMS",
		ListDescriber:        ParallelDescribeRegional(describer.KMSKeyRotation),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kms_key"},
		TerraformServiceName: "kms",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::Ipam": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::Ipam",
		ResourceLabel:        "IPAM",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Ipam),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Ipam),
		TerraformName:        []string{"aws_vpc_ipam"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticBeanstalk::Environment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticBeanstalk::Environment",
		ResourceLabel:        "App Environments",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticBeanstalk",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticBeanstalkEnvironment),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elastic_beanstalk_environment"},
		TerraformServiceName: "elasticbeanstalk",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticBeanstalk::ApplicationVersion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticBeanstalk::ApplicationVersion",
		ResourceLabel:        "Application Version",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticBeanstalk",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticBeanstalkApplicationVersion),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elastic_beanstalk_application_version"},
		TerraformServiceName: "elasticbeanstalk",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Lambda::FunctionVersion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Lambda::FunctionVersion",
		ResourceLabel:        "Function Version",
		Tags:                 map[string][]string{},
		ServiceName:          "Lambda",
		ListDescriber:        ParallelDescribeRegional(describer.LambdaFunctionVersion),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::DevEndpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::DevEndpoint",
		ResourceLabel:        "Glue Dev Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueDevEndpoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_dev_endpoint"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::RecoveryPoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::RecoveryPoint",
		ResourceLabel:        "Backup Recovery Point",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupRecoveryPoint),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::ReportPlan": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::ReportPlan",
		ResourceLabel:        "Backup Report Plan",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupReportPlan),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetBackupReportPlan),
		TerraformName:        []string{"aws_backup_report_plan"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::RegionSetting": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::RegionSetting",
		ResourceLabel:        "Backup Region Setting",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupRegionSetting),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_backup_region_settings"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDbStreams::Stream": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDbStreams::Stream",
		ResourceLabel:        "Stream",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbStream),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::EgressOnlyInternetGateway": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::EgressOnlyInternetGateway",
		ResourceLabel:        "Egress-Only Internet Gateway",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2EgressOnlyInternetGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2EgressOnlyInternetGateway),
		TerraformName:        []string{"aws_egress_only_internet_gateway"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::Distribution": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::CloudFront::Distribution",
		ResourceLabel: "CloudFront Distribution",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/CloudFront.svg"},
		},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontDistribution),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_distribution"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::CloudFront::StreamingDistribution": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::StreamingDistribution",
		ResourceLabel:        "CloudFront Streaming Distribution",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontStreamingDistribution),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Glue::Job": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::Job",
		ResourceLabel:        "Glue Job",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueJob),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetGlueJob),
		TerraformName:        []string{"aws_glue_job"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AppStream::Fleet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AppStream::Fleet",
		ResourceLabel:        "AppStream Fleet",
		Tags:                 map[string][]string{},
		ServiceName:          "AppStream",
		ListDescriber:        ParallelDescribeRegional(describer.AppStreamFleet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_appstream_fleet"},
		TerraformServiceName: "appstream",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SES::ConfigurationSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SES::ConfigurationSet",
		ResourceLabel:        "SES Config Set",
		Tags:                 map[string][]string{},
		ServiceName:          "SES",
		ListDescriber:        ParallelDescribeRegional(describer.SESConfigurationSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ses_configuration_set"},
		TerraformServiceName: "ses",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::IAM::User": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::User",
		ResourceLabel:        "IAM Users",
		Tags:                 map[string][]string{},
		ServiceName:          "iam",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMUser),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_user"},
		TerraformServiceName: "iam",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::CloudFront::OriginRequestPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::OriginRequestPolicy",
		ResourceLabel:        "CloudFront Origin Request Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontOriginRequestPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_origin_request_policy"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::SecurityGroup": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::SecurityGroup",
		ResourceLabel: "EC2 Network Security Groups",
		Tags: map[string][]string{
			"category": {"Networking"},
		},
		ServiceName:          "EC2.NetworkSecurity",
		ListDescriber:        ParallelDescribeRegional(describer.EC2SecurityGroup),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2SecurityGroup),
		TerraformName:        []string{"aws_security_group"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::GuardDuty::IPSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::IPSet",
		ResourceLabel:        "GuardDuty IP Set",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyIPSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_ipset"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EKS::Cluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EKS::Cluster",
		ResourceLabel:        "Kubernetes Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "eks",
		ListDescriber:        ParallelDescribeRegional(describer.EKSCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_eks_cluster"},
		TerraformServiceName: "eks",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Grafana::Workspace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Grafana::Workspace",
		ResourceLabel:        "Grafana Workspace",
		Tags:                 map[string][]string{},
		ServiceName:          "Grafana",
		ListDescriber:        ParallelDescribeRegional(describer.GrafanaWorkspace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_grafana_workspace"},
		TerraformServiceName: "grafana",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::CatalogDatabase": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::CatalogDatabase",
		ResourceLabel:        "Glue Catalog Database",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueCatalogDatabase),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_catalog_database"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Health::Event": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Health::Event",
		ResourceLabel:        "Health Event",
		Tags:                 map[string][]string{},
		ServiceName:          "Health",
		ListDescriber:        ParallelDescribeRegional(describer.HealthEvent),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Health::AffectedEntity": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Health::AffectedEntity",
		ResourceLabel:        "Health Affected Entity",
		Tags:                 map[string][]string{},
		ServiceName:          "Health",
		ListDescriber:        ParallelDescribeRegional(describer.HealthAffectedEntity),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFormation::StackSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFormation::StackSet",
		ResourceLabel:        "CloudFormation StackSet",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFormation",
		ListDescriber:        ParallelDescribeRegional(describer.CloudFormationStackSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudformation_stack_set"},
		TerraformServiceName: "cloudformation",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::AvailabilityZone": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::AvailabilityZone",
		ResourceLabel:        "EC2 Availability Zone",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2AvailabilityZone),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2AvailabilityZone),
		TerraformName:        []string{"aws_availability_zone"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::TransitGateway": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::TransitGateway",
		ResourceLabel:        "Transit Gateways",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2TransitGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2TransitGateway),
		TerraformName:        []string{"aws_ec2_transit_gateway"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ApiGateway::UsagePlan": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGateway::UsagePlan",
		ResourceLabel:        "API Gateway Usage Plan",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayUsagePlan),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_api_gateway_usage_plan"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector::Finding": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector::Finding",
		ResourceLabel:        "Inspector Finding",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector",
		ListDescriber:        ParallelDescribeRegional(describer.InspectorFinding),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Fleet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::Fleet",
		ResourceLabel:        "EC2 Fleet",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Fleet),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Fleet),
		TerraformName:        []string{"aws_ec2_fleet"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticBeanstalk::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticBeanstalk::Application",
		ResourceLabel:        "Elastic BeanStalk Applications",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticBeanstalk",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticBeanstalkApplication),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elastic_beanstalk_application"},
		TerraformServiceName: "elasticbeanstalk",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancingV2::LoadBalancer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticLoadBalancingV2::LoadBalancer",
		ResourceLabel:        "ELBv2 Load Balancer",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingV2LoadBalancer),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetElasticLoadBalancingV2LoadBalancer),
		TerraformName:        []string{"aws_alb"},
		TerraformServiceName: "elbv2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::OpenSearch::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::OpenSearch::Domain",
		ResourceLabel:        "OpenSearch Domain",
		Tags:                 map[string][]string{},
		ServiceName:          "OpenSearch",
		ListDescriber:        ParallelDescribeRegional(describer.OpenSearchDomain),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_opensearch_domain"},
		TerraformServiceName: "opensearch",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBEventSubscription": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBEventSubscription",
		ResourceLabel:        "Event Subscription",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBEventSubscription),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_db_event_subscription"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBEngineVersion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBEngineVersion",
		ResourceLabel:        "Engine Version",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBEngineVersion),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_rds_db_engine_version"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::RegionalSettings": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::RegionalSettings",
		ResourceLabel:        "Regional Settings",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2RegionalSettings),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::SecurityGroupRule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::SecurityGroupRule",
		ResourceLabel:        "Security Group Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2SecurityGroupRule),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_security_group_rule"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::TransitGatewayAttachment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::TransitGatewayAttachment",
		ResourceLabel:        "EC2 Transit Gateway Attachment",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2TransitGatewayAttachment),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2TransitGatewayAttachment),
		TerraformName:        []string{"aws_ec2_transit_gateway_attachment"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SES::Identity": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SES::Identity",
		ResourceLabel:        "SES Identities",
		Tags:                 map[string][]string{},
		ServiceName:          "SES",
		ListDescriber:        ParallelDescribeRegional(describer.SESIdentity),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ses_email_identity"},
		TerraformServiceName: "ses",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SESv2::EmailIdentities": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SESv2::EmailIdentities",
		ResourceLabel:        "SESv2 EmailIdentities",
		Tags:                 map[string][]string{},
		ServiceName:          "SESv2",
		ListDescriber:        ParallelDescribeRegional(describer.SESv2EmailIdentities),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sesv2_email_identity"},
		TerraformServiceName: "sesv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAF::Rule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAF::Rule",
		ResourceLabel:        "WAF Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRule),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_waf_rule"},
		TerraformServiceName: "waf",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAF::RuleGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAF::RuleGroup",
		ResourceLabel:        "WAF Rule Group",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRuleGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_waf_rule_group"},
		TerraformServiceName: "waf",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAF::RateBasedRule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAF::RateBasedRule",
		ResourceLabel:        "WAF Rate Based Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRateBasedRule),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAF::WebACL": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAF::WebACL",
		ResourceLabel:        "WAF Web ACL",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFWebACL),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_waf_web_acl"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFRegional::WebACL": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFRegional::WebACL",
		ResourceLabel:        "WAF Regional Web ACL",
		Tags:                 map[string][]string{},
		ServiceName:          "WAF",
		ListDescriber:        ParallelDescribeRegional(describer.WAFRegionalWebACL),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_wafregional_web_acl"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::Workload": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::Workload",
		ResourceLabel:        "Well Architected Workload",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedWorkload),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::Answer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::Answer",
		ResourceLabel:        "Well Architected Answer",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedAnswer),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::CheckDetail": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::CheckDetail",
		ResourceLabel:        "Well Architected Check Detail",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedCheckDetail),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::CheckSummary": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::CheckSummary",
		ResourceLabel:        "Well Architected Check Summary",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedCheckSummary),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::ConsolidatedReport": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::ConsolidatedReport",
		ResourceLabel:        "Well Architected Consolidated Report",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedConsolidatedReport),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::Lens": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::Lens",
		ResourceLabel:        "Well Architected Lens",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedLens),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::LensReview": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::LensReview",
		ResourceLabel:        "Well Architected Lens Review",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedLensReview),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::LensReviewImprovement": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::LensReviewImprovement",
		ResourceLabel:        "Well Architected Lens Review Improvement",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedLensReviewImprovement),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::LensReviewReport": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::LensReviewReport",
		ResourceLabel:        "Well Architected Lens Review Report",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedLensReviewReport),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::LensShare": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::LensShare",
		ResourceLabel:        "Well Architected Lens Share",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedLensShare),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::Milestone": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::Milestone",
		ResourceLabel:        "Well Architected Milestone",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedMilestone),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::Notification": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::Notification",
		ResourceLabel:        "Well Architected Notification",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedNotification),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::ShareInvitation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::ShareInvitation",
		ResourceLabel:        "Well Architected Share Invitation",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedShareInvitation),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WellArchitected::WorkloadShare": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WellArchitected::WorkloadShare",
		ResourceLabel:        "Well Architected Workload Share",
		Tags:                 map[string][]string{},
		ServiceName:          "WellArchitected",
		ListDescriber:        ParallelDescribeRegional(describer.WellArchitectedWorkloadShare),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AutoScaling::LaunchConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AutoScaling::LaunchConfiguration",
		ResourceLabel:        "Autoscaling Launch Config",
		Tags:                 map[string][]string{},
		ServiceName:          "AutoScaling",
		ListDescriber:        ParallelDescribeRegional(describer.AutoScalingLaunchConfiguration),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetAutoScalingLaunchConfiguration),
		TerraformName:        []string{"aws_launch_configuration"},
		TerraformServiceName: "autoscaling",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudTrail::EventDataStore": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudTrail::EventDataStore",
		ResourceLabel:        "Cloud Trail Event Data Store",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudTrail",
		ListDescriber:        ParallelDescribeRegional(describer.CloudTrailEventDataStore),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudtrail_event_data_store"},
		TerraformServiceName: "cloudtrail",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeDeploy::DeploymentGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeDeploy::DeploymentGroup",
		ResourceLabel:        "CodeDeploy Deployment Group",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeDeploy",
		ListDescriber:        ParallelDescribeRegional(describer.CodeDeployDeploymentGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ImageBuilder::Image": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ImageBuilder::Image",
		ResourceLabel:        "Image Builder Image",
		Tags:                 map[string][]string{},
		ServiceName:          "ImageBuilder",
		ListDescriber:        ParallelDescribeRegional(describer.ImageBuilderImage),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_imagebuilder_image"},
		TerraformServiceName: "imagebuilder",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Redshift::ClusterParameterGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Redshift::ClusterParameterGroup",
		ResourceLabel:        "Redshift Cluster Parameter Group",
		Tags:                 map[string][]string{},
		ServiceName:          "Redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftClusterParameterGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_redshift_parameter_group"},
		TerraformServiceName: "redshift",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Account::AlternateContact": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Account::AlternateContact",
		ResourceLabel:        "Account Alternate Contact",
		Tags:                 map[string][]string{},
		ServiceName:          "Account",
		ListDescriber:        SequentialDescribeGlobal(describer.AccountAlternateContact),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_account_alternate_contact"},
		TerraformServiceName: "account",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector::AssessmentTarget": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector::AssessmentTarget",
		ResourceLabel:        "Inspector Assessment Target",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector",
		ListDescriber:        ParallelDescribeRegional(describer.InspectorAssessmentTarget),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_inspector_assessment_target"},
		TerraformServiceName: "inspector",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::ResponseHeadersPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::ResponseHeadersPolicy",
		ResourceLabel:        "CloudFront Response Headers Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontResponseHeadersPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_response_headers_policy"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Instance": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::Instance",
		ResourceLabel: "EC2 Servers",
		Tags: map[string][]string{
			"category": {"Compute"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Ec2Instance.svg"},
		},
		ServiceName:          "EC2.Compute",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Instance),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Instance),
		TerraformName:        []string{"aws_instance"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::InstanceMetricCpuUtilizationHourly": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::InstanceMetricCpuUtilizationHourly",
		ResourceLabel: "EC2 Instance CPU Utilization Hourly Statistics",
		Tags: map[string][]string{
			"category": {"Compute"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Ec2Instance.svg"},
		},
		ServiceName:          "EC2.Compute",
		ListDescriber:        ParallelDescribeRegional(describer.Ec2InstanceMetricCpuUtilizationHourly),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::ReservedInstances": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::ReservedInstances",
		ResourceLabel:        "Reserved Instances",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Other",
		ListDescriber:        ParallelDescribeRegional(describer.EC2ReservedInstances),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2ReservedInstances),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ECR::Repository": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ECR::Repository",
		ResourceLabel: "Container Repositories",
		Tags: map[string][]string{
			"category": {"Containers"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticContainerRegistry.svg"},
		},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRRepository),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecr_repository"},
		TerraformServiceName: "ecr",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECR::Registry": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ECR::Registry",
		ResourceLabel: "Container Registry",
		Tags: map[string][]string{
			"category": {"Containers"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticContainerRegistry.svg"},
		},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRRegistry),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecr_registry"},
		TerraformServiceName: "ecr",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECR::RegistryScanningConfiguration": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ECR::RegistryScanningConfiguration",
		ResourceLabel: "Container Registry Scanning Configuration",
		Tags: map[string][]string{
			"category": {"Containers"},
			"logo_uri": {},
		},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRRegistryScanningConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecr_registry_scanning_configuration"},
		TerraformServiceName: "ecr",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancingV2::Listener": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticLoadBalancingV2::Listener",
		ResourceLabel:        "Load Balancer Listener",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingV2Listener),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetElasticLoadBalancingV2Listener),
		TerraformName:        []string{"aws_alb_listener"},
		TerraformServiceName: "elbv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::Group": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::Group",
		ResourceLabel:        "IAM Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_iam_group"},
		TerraformServiceName: "iam",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::IAM::OpenIdConnectProvider": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::OpenIdConnectProvider",
		ResourceLabel:        "IAM Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        SequentialDescribeGlobal(describer.IAMOpenIdConnectProvider),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetIAMOpenIdConnectProvider),
		TerraformName:        []string{"aws_iam_openid_connect_provider"},
		TerraformServiceName: "iam",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::Plan": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::Plan",
		ResourceLabel:        "Backup Plans",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupPlan),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_backup_plan"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Config::ConformancePack": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Config::ConformancePack",
		ResourceLabel:        "Config Conformance Pack",
		Tags:                 map[string][]string{},
		ServiceName:          "Config",
		ListDescriber:        ParallelDescribeRegional(describer.ConfigConformancePack),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Config::RetentionConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Config::RetentionConfiguration",
		ResourceLabel:        "Config Retention Configuration",
		Tags:                 map[string][]string{},
		ServiceName:          "Config",
		ListDescriber:        ParallelDescribeRegional(describer.ConfigRetentionConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Account::Contact": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Account::Contact",
		ResourceLabel:        "Account Contact",
		Tags:                 map[string][]string{},
		ServiceName:          "Account",
		ListDescriber:        SequentialDescribeGlobal(describer.AccountContact),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::DataQualityRuleset": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::DataQualityRuleset",
		ResourceLabel:        "Glue Data Quality Ruleset",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueDataQualityRuleset),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EventBridge::EventBus": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EventBridge::EventBus",
		ResourceLabel:        "EventBridge Bus",
		Tags:                 map[string][]string{},
		ServiceName:          "EventBridge",
		ListDescriber:        ParallelDescribeRegional(describer.EventBridgeBus),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGateway::Stage": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGateway::Stage",
		ResourceLabel:        "API Gateway Stage",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayStage),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayStage),
		TerraformName:        []string{"aws_api_gateway_stage"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGatewayV2::Stage": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGatewayV2::Stage",
		ResourceLabel:        "API Gateway V2 Stage",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayV2Stage),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDb::LocalSecondaryIndex": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDb::LocalSecondaryIndex",
		ResourceLabel:        "DynamoDB Indexes",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbLocalSecondaryIndex),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ResourceGroups::Groups": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ResourceGroups::Groups",
		ResourceLabel:        "Resource Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "ResourceGroups",
		ListDescriber:        ParallelDescribeRegional(describer.ResourceGroups),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_resourcegroups_group"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Timestream::Database": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Timestream::Database",
		ResourceLabel:        "Timestream Database",
		Tags:                 map[string][]string{},
		ServiceName:          "Timestream",
		ListDescriber:        ParallelDescribeRegional(describer.TimestreamDatabase),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_timestreamwrite_database"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::OpenSearchServerless::Collection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::OpenSearchServerless::Collection",
		ResourceLabel:        "OpenSearchServerless Collection",
		Tags:                 map[string][]string{},
		ServiceName:          "OpenSearchServerless",
		ListDescriber:        ParallelDescribeRegional(describer.OpenSearchServerlessCollection),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_opensearchserverless_collection"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::ElasticIP": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::ElasticIP",
		ResourceLabel:        "EC2 ElasticIP",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2ElasticIP),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_eip"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::LocalGateway": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::LocalGateway",
		ResourceLabel:        "EC2 LocalGateway",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2LocalGateway),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ec2_local_gateway"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Image": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::Image",
		ResourceLabel: "EC2 Images (AMIs)",
		Tags: map[string][]string{
			"category": {"Compute"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Ec2AmiResource.svg"},
		},
		ServiceName:          "EC2.Storage",
		ListDescriber:        ParallelDescribeRegional(describer.EC2AMI),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2AMI),
		TerraformName:        []string{"aws_ami"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Subnet": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::Subnet",
		ResourceLabel: "Subnets",
		Tags: map[string][]string{
			"category": {"Networking"},
		},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Subnet),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Subnet),
		TerraformName:        []string{"aws_subnet"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECS::TaskSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::TaskSet",
		ResourceLabel:        "ECS Task Sets",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSTaskSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecs_task_set"},
		TerraformServiceName: "ecs",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Kinesis::Stream": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Kinesis::Stream",
		ResourceLabel:        "Kinesis Streams",
		Tags:                 map[string][]string{},
		ServiceName:          "Kinesis",
		ListDescriber:        ParallelDescribeRegional(describer.KinesisStream),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kinesis_stream"},
		TerraformServiceName: "kinesis",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Kinesis::Consumer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Kinesis::Consumer",
		ResourceLabel:        "Kinesis Stream Consumers",
		Tags:                 map[string][]string{},
		ServiceName:          "Kinesis",
		ListDescriber:        ParallelDescribeRegional(describer.KinesisConsumer),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kinesis_stream_consumer"},
		TerraformServiceName: "kinesis",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DocDB::Cluster": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::DocDB::Cluster",
		ResourceLabel: "Document DB Clusters",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/DocumentDb.svg"},
		},
		ServiceName:          "DocDB",
		ListDescriber:        ParallelDescribeRegional(describer.DocDBCluster),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetDocDBCluster),
		TerraformName:        []string{"aws_docdb_cluster"},
		TerraformServiceName: "docdb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DocDB::ClusterSnapshot": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::DocDB::ClusterSnapshot",
		ResourceLabel: "Document DB Cluster Snapshots",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/DocumentDb.svg"},
		},
		ServiceName:          "DocDB",
		ListDescriber:        ParallelDescribeRegional(describer.DocDBClusterSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_docdb_cluster_snapshot"},
		TerraformServiceName: "docdb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DocDB::ClusterInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DocDB::ClusterInstance",
		ResourceLabel:        "Document DB Cluster Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "DocDB",
		ListDescriber:        ParallelDescribeRegional(describer.DocDBClusterInstance),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetDocDBClusterInstance),
		TerraformName:        []string{"aws_docdb_cluster_instance"},
		TerraformServiceName: "docdb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElastiCache::ReplicationGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElastiCache::ReplicationGroup",
		ResourceLabel:        "ElastiCache Replication Group",
		Tags:                 map[string][]string{},
		ServiceName:          "ElastiCache",
		ListDescriber:        ParallelDescribeRegional(describer.ElastiCacheReplicationGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_elasticache_replication_group"},
		TerraformServiceName: "elasticache",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GlobalAccelerator::Accelerator": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GlobalAccelerator::Accelerator",
		ResourceLabel:        "Global Accelerator",
		Tags:                 map[string][]string{},
		ServiceName:          "GlobalAccelerator",
		ListDescriber:        ParallelDescribeRegional(describer.GlobalAcceleratorAccelerator),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_globalaccelerator_accelerator"},
		TerraformServiceName: "globalaccelerator",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EMR::InstanceGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EMR::InstanceGroup",
		ResourceLabel:        "EMR Instance Group",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticMapReduce",
		ListDescriber:        ParallelDescribeRegional(describer.EMRInstanceGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_emr_instance_group"},
		TerraformServiceName: "emr",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::ManagedPrefixList": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::ManagedPrefixList",
		ResourceLabel:        "EC2 Managed Prefix List",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2ManagedPrefixList),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2ManagedPrefixList),
		TerraformName:        []string{"aws_ec2_managed_prefix_list"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::ClientVpnEndpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::ClientVpnEndpoint",
		ResourceLabel:        "EC2 Client VPN Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2ClientVpnEndpoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ec2_client_vpn_endpoint"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::MWAA::Environment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::MWAA::Environment",
		ResourceLabel:        "MWAA Environment",
		Tags:                 map[string][]string{},
		ServiceName:          "MWAA",
		ListDescriber:        ParallelDescribeRegional(describer.MWAAEnvironment),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_mwaa_environment"},
		TerraformServiceName: "mwaa",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudWatch::LogResourcePolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudWatch::LogResourcePolicy",
		ResourceLabel:        "CloudWatch Log Resource Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudWatch",
		ListDescriber:        ParallelDescribeRegional(describer.CloudWatchLogsResourcePolicy),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeArtifact::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeArtifact::Domain",
		ResourceLabel:        "CodeArtifact Domain",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeArtifact",
		ListDescriber:        ParallelDescribeRegional(describer.CodeArtifactDomain),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_codeartifact_domain"},
		TerraformServiceName: "codeartifact",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeStar::Project": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeStar::Project",
		ResourceLabel:        "CodeStar Project",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeStar",
		ListDescriber:        ParallelDescribeRegional(describer.CodeStarProject),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Neptune::Database": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::Neptune::Database",
		ResourceLabel: "Neptune Databases",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Neptune.svg"},
		},
		ServiceName:          "Neptune",
		ListDescriber:        ParallelDescribeRegional(describer.NeptuneDatabase),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_neptune_cluster_instance"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Neptune::DBCluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Neptune::DBCluster",
		ResourceLabel:        "Neptune Cluster",
		Tags:                 map[string][]string{},
		ServiceName:          "Neptune",
		ListDescriber:        ParallelDescribeRegional(describer.NeptuneDatabaseCluster),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_neptune_cluster"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Neptune::DBClusterSnapshot": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Neptune::DBClusterSnapshot",
		ResourceLabel:        "Neptune Cluster Snapshot",
		Tags:                 map[string][]string{},
		ServiceName:          "Neptune",
		ListDescriber:        ParallelDescribeRegional(describer.NeptuneDatabaseClusterSnapshot),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_neptune_cluster_snapshot"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::NetworkFirewall::FirewallPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::NetworkFirewall::FirewallPolicy",
		ResourceLabel:        "Network Firewall Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "network-firewall",
		ListDescriber:        ParallelDescribeRegional(describer.NetworkFirewallPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::NetworkFirewall::RuleGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::NetworkFirewall::RuleGroup",
		ResourceLabel:        "Network Firewall Rule Group",
		Tags:                 map[string][]string{},
		ServiceName:          "network-firewall",
		ListDescriber:        ParallelDescribeRegional(describer.NetworkFirewallRuleGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Oam::Link": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Oam::Link",
		ResourceLabel:        "OAM Link",
		Tags:                 map[string][]string{},
		ServiceName:          "OAM",
		ListDescriber:        ParallelDescribeRegional(describer.OAMLink),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Oam::Sink": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Oam::Sink",
		ResourceLabel:        "OAM Sink",
		Tags:                 map[string][]string{},
		ServiceName:          "OAM",
		ListDescriber:        ParallelDescribeRegional(describer.OAMSink),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Organizations::Account": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Organizations::Account",
		ResourceLabel:        "Organizations Account",
		Tags:                 map[string][]string{},
		ServiceName:          "OAM",
		ListDescriber:        SequentialDescribeGlobal(describer.OrganizationsAccount),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Pinpoint::App": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Pinpoint::App",
		ResourceLabel:        "Pinpoint App",
		Tags:                 map[string][]string{},
		ServiceName:          "Pinpoint",
		ListDescriber:        ParallelDescribeRegional(describer.PinpointApp),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Pipes::Pipe": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Pipes::Pipe",
		ResourceLabel:        "Pipe",
		Tags:                 map[string][]string{},
		ServiceName:          "Pipes",
		ListDescriber:        ParallelDescribeRegional(describer.PipesPipe),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBClusterParameterGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBClusterParameterGroup",
		ResourceLabel:        "RDS Cluster Parameter Group",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBClusterParameterGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::OptionGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::OptionGroup",
		ResourceLabel:        "RDS Option Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSOptionGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBParameterGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBParameterGroup",
		ResourceLabel:        "RDS Parameter Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBParameterGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBProxy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBProxy",
		ResourceLabel:        "RDS Proxy",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBProxy),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBSubnetGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBSubnetGroup",
		ResourceLabel:        "RDS Subnet Groups",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBSubnetGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::DBRecommendation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::DBRecommendation",
		ResourceLabel:        "RDS DB Recommendation",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSDBRecommendation),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Redshift::EventSubscription": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Redshift::EventSubscription",
		ResourceLabel:        "Redshift Event Subscriptions",
		Tags:                 map[string][]string{},
		ServiceName:          "Redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftEventSubscription),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RedshiftServerless::Workgroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RedshiftServerless::Workgroup",
		ResourceLabel:        "Redshift Serverless Workgroup",
		Tags:                 map[string][]string{},
		ServiceName:          "Redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftServerlessWorkgroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ResourceExplorer2::Index": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ResourceExplorer2::Index",
		ResourceLabel:        "Resource Explorer Index",
		Tags:                 map[string][]string{},
		ServiceName:          "ResourceExplorer2",
		ListDescriber:        ParallelDescribeRegional(describer.ResourceExplorerIndex),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53::HealthCheck": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::HealthCheck",
		ResourceLabel:        "Route53 Health Check",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        ParallelDescribeRegional(describer.Route53HealthCheck),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_health_check"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53Resolver::ResolverRule": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53Resolver::ResolverRule",
		ResourceLabel:        "Route53 Resolver Rule",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        ParallelDescribeRegional(describer.Route53ResolverResolverRule),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53Resolver::QueryLogConfig": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53Resolver::QueryLogConfig",
		ResourceLabel:        "Route53 Resolver Query Log Config",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        ParallelDescribeRegional(describer.Route53ResolverQueryLogConfig),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetRoute53ResolverQueryLogConfig),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::App": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::App",
		ResourceLabel:        "SageMaker App",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerApp),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::Domain",
		ResourceLabel:        "SageMaker Domain",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerDomain),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::StepFunctions::StateMachine": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::StepFunctions::StateMachine",
		ResourceLabel:        "Step Functions State Machine",
		Tags:                 map[string][]string{},
		ServiceName:          "StepFunctions",
		ListDescriber:        ParallelDescribeRegional(describer.StepFunctionsStateMachine),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sfn_state_machine"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::StepFunctions::StateMachineExecution": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::StepFunctions::StateMachineExecution",
		ResourceLabel:        "Step Functions State Machine Execution",
		Tags:                 map[string][]string{},
		ServiceName:          "StepFunctions",
		ListDescriber:        ParallelDescribeRegional(describer.StepFunctionsStateMachineExecution),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::StepFunctions::StateMachineExecutionHistories": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::StepFunctions::StateMachineExecutionHistories",
		ResourceLabel:        "Step Functions State Machine Execution History",
		Tags:                 map[string][]string{},
		ServiceName:          "StepFunctions",
		ListDescriber:        ParallelDescribeRegional(describer.StepFunctionsStateMachineExecutionHistories),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SimSpaceWeaver::Simulation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SimSpaceWeaver::Simulation",
		ResourceLabel:        "SimSpaceWeaver Simulation",
		Tags:                 map[string][]string{},
		ServiceName:          "SimSpaceWeaver",
		ListDescriber:        ParallelDescribeRegional(describer.SimSpaceWeaverSimulation),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::Association": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::Association",
		ResourceLabel:        "SSM Association",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMAssociation),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::Document": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::Document",
		ResourceLabel:        "SSM Document",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMDocument),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::DocumentPermission": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::DocumentPermission",
		ResourceLabel:        "SSM Document Permission",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMDocumentPermission),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::CustomerGateway": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::CustomerGateway",
		ResourceLabel: "EC2 Customer Gateway",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/VpcCustomerGateway.svg"},
		},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2CustomerGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2CustomerGateway),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::VerifiedAccessInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VerifiedAccessInstance",
		ResourceLabel:        "EC2 Verified Access Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VerifiedAccessInstance),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VerifiedAccessInstance),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VerifiedAccessEndpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VerifiedAccessEndpoint",
		ResourceLabel:        "EC2 Verified Access Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VerifiedAccessEndpoint),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VerifiedAccessEndpoint),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VerifiedAccessGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VerifiedAccessGroup",
		ResourceLabel:        "EC2 Verified Access Group",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VerifiedAccessGroup),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VerifiedAccessGroup),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VerifiedAccessTrustProvider": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VerifiedAccessTrustProvider",
		ResourceLabel:        "EC2 Verified Access Trust Provider",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VerifiedAccessTrustProvider),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VerifiedAccessTrustProvider),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VPNGateway": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::VPNGateway",
		ResourceLabel: "EC2 VPN Gateway",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/VpcVpnGateway.svg"},
		},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPNGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VPNGateway),
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFv2::IPSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFv2::IPSet",
		ResourceLabel:        "WAFv2 IP Set",
		Tags:                 map[string][]string{},
		ServiceName:          "WAFv2",
		ListDescriber:        ParallelDescribeRegional(describer.WAFv2IPSet),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFv2::RegexPatternSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFv2::RegexPatternSet",
		ResourceLabel:        "WAFv2 Regex Pattern Set",
		Tags:                 map[string][]string{},
		ServiceName:          "WAFv2",
		ListDescriber:        ParallelDescribeRegional(describer.WAFv2RegexPatternSet),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::WAFv2::RuleGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::WAFv2::RuleGroup",
		ResourceLabel:        "WAFv2 Rule Group",
		Tags:                 map[string][]string{},
		ServiceName:          "WAFv2",
		ListDescriber:        ParallelDescribeRegional(describer.WAFv2RuleGroup),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::TransitGatewayRoute": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::TransitGatewayRoute",
		ResourceLabel:        "EC2 Transit Gateway Route",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2TransitGatewayRoute),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2TransitGatewayRoute),
		TerraformName:        []string{"aws_ec2_transit_gateway_route"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GuardDuty::Filter": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::Filter",
		ResourceLabel:        "GuardDuty Filter",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyFilter),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_filter"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ECS::TaskDefinition": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::TaskDefinition",
		ResourceLabel:        "ECS Task Definition",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSTaskDefinition),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetECSTaskDefinition),
		TerraformName:        []string{"aws_ecs_task_definition"},
		TerraformServiceName: "ecs",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GuardDuty::ThreatIntelSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::ThreatIntelSet",
		ResourceLabel:        "GuardDuty Threat Intel Set",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyThreatIntelSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_guardduty_threatintelset"},
		TerraformServiceName: "guardduty",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGatewayV2::DomainName": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGatewayV2::DomainName",
		ResourceLabel:        "Domain Names",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayV2DomainName),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayV2DomainName),
		TerraformName:        []string{"aws_apigatewayv2_domain_name"},
		TerraformServiceName: "apigatewayv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGateway::DomainName": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGateway::DomainName",
		ResourceLabel:        "Domain Names",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayDomainName),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetApiGatewayDomainName),
		TerraformName:        []string{"aws_apigateway_domain_name"},
		TerraformServiceName: "apigateway",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ApiGatewayV2::Route": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ApiGatewayV2::Route",
		ResourceLabel:        "Domain Names",
		Tags:                 map[string][]string{},
		ServiceName:          "ApiGateway",
		ListDescriber:        ParallelDescribeRegional(describer.ApiGatewayV2Route),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_api_gatewayv2_route"},
		TerraformServiceName: "apigatewayv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::MQ::Broker": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::MQ::Broker",
		ResourceLabel:        "MQ Broker",
		Tags:                 map[string][]string{},
		ServiceName:          "MQ",
		ListDescriber:        ParallelDescribeRegional(describer.MQBroker),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_mq_broker"},
		TerraformServiceName: "mq",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ACMPCA::CertificateAuthority": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ACMPCA::CertificateAuthority",
		ResourceLabel:        "ACM PCA Certificate Authority",
		Tags:                 map[string][]string{},
		ServiceName:          "ACMPCA",
		ListDescriber:        ParallelDescribeRegional(describer.ACMPCACertificateAuthority),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_acmpca_certificate_authority"},
		TerraformServiceName: "acmpca",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFormation::Stack": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFormation::Stack",
		ResourceLabel:        "CloudFormation Stacks",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFormation",
		ListDescriber:        ParallelDescribeRegional(describer.CloudFormationStack),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetCloudFormationStack),
		TerraformName:        []string{"aws_cloudformation_stack"},
		TerraformServiceName: "cloudformation",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::CloudFormation::StackResource": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFormation::StackResource",
		ResourceLabel:        "CloudFormation Stacks Resources",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFormation",
		ListDescriber:        ParallelDescribeRegional(describer.CloudFormationStackResource),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetCloudFormationStackResource),
		TerraformName:        []string{},
		TerraformServiceName: "cloudformation",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DirectConnect::Connection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DirectConnect::Connection",
		ResourceLabel:        "DirectConnect Connections",
		Tags:                 map[string][]string{},
		ServiceName:          "DirectConnect",
		ListDescriber:        ParallelDescribeRegional(describer.DirectConnectConnection),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dx_connection"},
		TerraformServiceName: "directconnect",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::FSX::FileSystem": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::FSX::FileSystem",
		ResourceLabel:        "FSX File Systems",
		Tags:                 map[string][]string{},
		ServiceName:          "fsx",
		ListDescriber:        ParallelDescribeRegional(describer.FSXFileSystem),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_fsx_ontap_file_system", "aws_fsx_openzfs_file_system"},
		TerraformServiceName: "fsx",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Glue::SecurityConfiguration": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Glue::SecurityConfiguration",
		ResourceLabel:        "Glue Security Configuration",
		Tags:                 map[string][]string{},
		ServiceName:          "Glue",
		ListDescriber:        ParallelDescribeRegional(describer.GlueSecurityConfiguration),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_glue_security_configuration"},
		TerraformServiceName: "glue",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector::AssessmentRun": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector::AssessmentRun",
		ResourceLabel:        "Inspector Assessment Runs",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector",
		ListDescriber:        ParallelDescribeRegional(describer.InspectorAssessmentRun),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector2::Coverage": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector2::Coverage",
		ResourceLabel:        "Inspector2 Coverage",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector2",
		ListDescriber:        ParallelDescribeRegional(describer.Inspector2Coverage),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector2::CoverageStatistics": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector2::CoverageStatistics",
		ResourceLabel:        "Inspector2 Coverage Statistics",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector2",
		ListDescriber:        ParallelDescribeRegional(describer.Inspector2CoverageStatistic),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector2::Member": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector2::Member",
		ResourceLabel:        "Inspector2 Member",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector2",
		ListDescriber:        ParallelDescribeRegional(describer.Inspector2CoverageMember),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Inspector2::Finding": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Inspector2::Finding",
		ResourceLabel:        "Inspector2 Finding",
		Tags:                 map[string][]string{},
		ServiceName:          "Inspector2",
		ListDescriber:        ParallelDescribeRegional(describer.Inspector2Finding),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Config::ConfigurationRecorder": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Config::ConfigurationRecorder",
		ResourceLabel:        "Config Configuration Recorder",
		Tags:                 map[string][]string{},
		ServiceName:          "Config",
		ListDescriber:        ParallelDescribeRegional(describer.ConfigConfigurationRecorder),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_config_configuration_recorder"},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::NatGateway": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::NatGateway",
		ResourceLabel: "NAT Gateways",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/VpcNatGateway.svg"},
		},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2NatGateway),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2NatGateway),
		TerraformName:        []string{"aws_nat_gateway"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECR::PublicRepository": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECR::PublicRepository",
		ResourceLabel:        "ECR Public Repository",
		Tags:                 map[string][]string{},
		ServiceName:          "ECR",
		ListDescriber:        ParallelDescribeRegional(describer.ECRPublicRepository),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ecrpublic_repository"},
		TerraformServiceName: "ecrpublic",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ECS::Cluster": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ECS::Cluster",
		ResourceLabel:        "ECS Clusters",
		Tags:                 map[string][]string{},
		ServiceName:          "ECS",
		ListDescriber:        ParallelDescribeRegional(describer.ECSCluster),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetECSCluster),
		TerraformName:        []string{"aws_ecs_cluster"},
		TerraformServiceName: "ecs",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancingV2::TargetGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticLoadBalancingV2::TargetGroup",
		ResourceLabel:        "ELBv2 Target Group",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingV2TargetGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_alb_target_group"},
		TerraformServiceName: "elbv2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::CachePolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::CachePolicy",
		ResourceLabel:        "CloudFront Cache Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontCachePolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_cache_policy"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CodeArtifact::Repository": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CodeArtifact::Repository",
		ResourceLabel:        "CodeArtifact Repository",
		Tags:                 map[string][]string{},
		ServiceName:          "CodeArtifact",
		ListDescriber:        ParallelDescribeRegional(describer.CodeArtifactRepository),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_codeartifact_repository"},
		TerraformServiceName: "codeartifact",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AMP::Workspace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AMP::Workspace",
		ResourceLabel:        "AMP Workspace",
		Tags:                 map[string][]string{},
		ServiceName:          "AMP",
		ListDescriber:        ParallelDescribeRegional(describer.AMPWorkspace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_prometheus_workspace"},
		TerraformServiceName: "amp",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::CapacityReservation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::CapacityReservation",
		ResourceLabel:        "EC2 Capacity Reservation",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2CapacityReservation),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2CapacityReservation),
		TerraformName:        []string{"aws_ec2_capacity_reservation"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::NotebookInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::NotebookInstance",
		ResourceLabel:        "SageMaker Notebook Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerNotebookInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sagemaker_notebook_instance"},
		TerraformServiceName: "sagemaker",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IAM::AccessAdvisor": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IAM::AccessAdvisor",
		ResourceLabel:        "IAM AccessAdvisor",
		Tags:                 map[string][]string{},
		ServiceName:          "IAM",
		ListDescriber:        ParallelDescribeRegional(describer.IAMAccessAdvisor),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VolumeSnapshot": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::VolumeSnapshot",
		ResourceLabel: "EC2 Volume Snapshots",
		Tags: map[string][]string{
			"category": {"Storage"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticBlockStoreSnapshot.svg"},
		},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VolumeSnapshot),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VolumeSnapshot),
		TerraformName:        []string{"aws_ebs_snapshot", "aws_ebs_snapshot_copy"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Region": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::Region",
		ResourceLabel:        "Region",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Region),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Keyspaces::Table": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Keyspaces::Table",
		ResourceLabel:        "Keyspaces Table",
		Tags:                 map[string][]string{},
		ServiceName:          "Keyspaces",
		ListDescriber:        ParallelDescribeRegional(describer.KeyspacesTable),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_keyspaces_table"},
		TerraformServiceName: "keyspaces",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Config::AggregationAuthorization": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Config::AggregationAuthorization",
		ResourceLabel:        "Config Aggregation Authorization",
		Tags:                 map[string][]string{},
		ServiceName:          "Config",
		ListDescriber:        ParallelDescribeRegional(describer.ConfigAggregateAuthorization),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DAX::SubnetGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DAX::SubnetGroup",
		ResourceLabel:        "DAX Subnet Group",
		Tags:                 map[string][]string{},
		ServiceName:          "DAX",
		ListDescriber:        ParallelDescribeRegional(describer.DAXSubnetGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dax_subnet_group"},
		TerraformServiceName: "dax",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDb::GlobalTable": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DynamoDb::GlobalTable",
		ResourceLabel:        "DynamoDB Global Table",
		Tags:                 map[string][]string{},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbGlobalTable),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dynamodb_global_table"},
		TerraformServiceName: "dynamodb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancing::LoadBalancer": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::ElasticLoadBalancing::LoadBalancer",
		ResourceLabel: "Classic Load Balancers",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/ElasticLoadBalancingClassicLoadBalancer.svg"},
		},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingLoadBalancer),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_lb", "aws_elb"},
		TerraformServiceName: "elb",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::AppStream::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::AppStream::Application",
		ResourceLabel:        "AppStream Application",
		Tags:                 map[string][]string{},
		ServiceName:          "AppStream",
		ListDescriber:        ParallelDescribeRegional(describer.AppStreamApplication),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RedshiftServerless::Namespace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RedshiftServerless::Namespace",
		ResourceLabel:        "Redshift Serverless Namespace",
		Tags:                 map[string][]string{},
		ServiceName:          "RedshiftServerless",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftServerlessNamespace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_redshiftserverless_namespace"},
		TerraformServiceName: "redshiftserverless",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudFront::OriginAccessIdentity": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudFront::OriginAccessIdentity",
		ResourceLabel:        "CloudFront Origin Access Identity",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudFront",
		ListDescriber:        SequentialDescribeGlobal(describer.CloudFrontOriginAccessIdentity),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_cloudfront_origin_access_identity"},
		TerraformServiceName: "cloudfront",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::Host": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::Host",
		ResourceLabel:        "EC2 Host",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2Host),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2Host),
		TerraformName:        []string{"aws_ec2_host"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VPC": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::EC2::VPC",
		ResourceLabel: "Virtual Networks (VPCs)",
		Tags: map[string][]string{
			"category": {"Networking"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/Vpc.svg"},
		},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPC),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2VPC),
		TerraformName:        []string{"aws_vpc"},
		TerraformServiceName: "ec2",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::EC2::TransitGatewayRouteTable": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::TransitGatewayRouteTable",
		ResourceLabel:        "EC2 Transit Gateway Route Table",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2TransitGatewayRouteTable),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2TransitGatewayRouteTable),
		TerraformName:        []string{"aws_ec2_transit_gateway_route_table"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EKS::Nodegroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EKS::Nodegroup",
		ResourceLabel:        "EKS Node Group",
		Tags:                 map[string][]string{},
		ServiceName:          "EKS",
		ListDescriber:        ParallelDescribeRegional(describer.EKSNodegroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_eks_node_group"},
		TerraformServiceName: "eks",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Backup::Selection": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Backup::Selection",
		ResourceLabel:        "Backup Selection",
		Tags:                 map[string][]string{},
		ServiceName:          "Backup",
		ListDescriber:        ParallelDescribeRegional(describer.BackupSelection),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_backup_selection"},
		TerraformServiceName: "backup",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CloudTrail::Import": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CloudTrail::Import",
		ResourceLabel:        "CloudTrail Import",
		Tags:                 map[string][]string{},
		ServiceName:          "CloudTrail",
		ListDescriber:        ParallelDescribeRegional(describer.CloudTrailImport),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::CostExplorer::ByServiceDaily": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::CostExplorer::ByServiceDaily",
		ResourceLabel:        "",
		Tags:                 map[string][]string{},
		ServiceName:          "CostExplorer",
		ListDescriber:        SequentialDescribeGlobal(describer.CostByServiceLastDay),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		CostDiscovery:        true,
		Summarize:            true,
	},

	"AWS::ElasticLoadBalancingV2::SslPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ElasticLoadBalancingV2::SslPolicy",
		ResourceLabel:        "ELBv2 SSL Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "ElasticLoadBalancing",
		ListDescriber:        ParallelDescribeRegional(describer.ElasticLoadBalancingV2SslPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::GuardDuty::Finding": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::GuardDuty::Finding",
		ResourceLabel:        "GuardDuty Finding",
		Tags:                 map[string][]string{},
		ServiceName:          "GuardDuty",
		ListDescriber:        ParallelDescribeRegional(describer.GuardDutyFinding),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::DHCPOptions": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::DHCPOptions",
		ResourceLabel:        "DHCP Configuration Set",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2.Network",
		ListDescriber:        ParallelDescribeRegional(describer.EC2DHCPOptions),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2DHCPOptions),
		TerraformName:        []string{"aws_vpc_dhcp_options"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Batch::ComputeEnvironment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Batch::ComputeEnvironment",
		ResourceLabel:        "Batch Compute Environment",
		Tags:                 map[string][]string{},
		ServiceName:          "Batch",
		ListDescriber:        ParallelDescribeRegional(describer.BatchComputeEnvironment),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetBatchComputeEnvironment),
		TerraformName:        []string{"aws_batch_compute_environment"},
		TerraformServiceName: "batch",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::DMS::ReplicationInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DMS::ReplicationInstance",
		ResourceLabel:        "Replication Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "DMS",
		ListDescriber:        ParallelDescribeRegional(describer.DMSReplicationInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dms_replication_instance"},
		TerraformServiceName: "dms",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DMS::Endpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DMS::Endpoint",
		ResourceLabel:        "DMS Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "DMS",
		ListDescriber:        ParallelDescribeRegional(describer.DMSEndpoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dms_endpoint"},
		TerraformServiceName: "dms",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DMS::ReplicationTask": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::DMS::ReplicationTask",
		ResourceLabel:        "Replication Task",
		Tags:                 map[string][]string{},
		ServiceName:          "DMS",
		ListDescriber:        ParallelDescribeRegional(describer.DMSReplicationTask),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dms_replication_task"},
		TerraformServiceName: "dms",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::DynamoDb::Table": {
		Connector:     source.CloudAWS,
		ResourceName:  "AWS::DynamoDb::Table",
		ResourceLabel: "DynamoDB Tables",
		Tags: map[string][]string{
			"category": {"Database"},
			"logo_uri": {"https://raw.githubusercontent.com/kaytu-io/awsicons/master/svg-export/icons/DynamoDbTable.svg"},
		},
		ServiceName:          "DynamoDb",
		ListDescriber:        ParallelDescribeRegional(describer.DynamoDbTable),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_dynamodb_table"},
		TerraformServiceName: "dynamodb",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Shield::ProtectionGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Shield::ProtectionGroup",
		ResourceLabel:        "Shield Protection Group",
		Tags:                 map[string][]string{},
		ServiceName:          "Shield",
		ListDescriber:        SequentialDescribeGlobal(describer.ShieldProtectionGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_shield_protection_group"},
		TerraformServiceName: "shield",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Firehose::DeliveryStream": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Firehose::DeliveryStream",
		ResourceLabel:        "Firehose Delivery Stream",
		Tags:                 map[string][]string{},
		ServiceName:          "Firehose",
		ListDescriber:        ParallelDescribeRegional(describer.FirehoseDeliveryStream),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kinesis_firehose_delivery_stream"},
		TerraformServiceName: "firehose",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::KinesisVideo::Stream": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::KinesisVideo::Stream",
		ResourceLabel:        "Kinesis Video Stream",
		Tags:                 map[string][]string{},
		ServiceName:          "KinesisVideo",
		ListDescriber:        ParallelDescribeRegional(describer.KinesisVideoStream),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::KMS::Alias": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::KMS::Alias",
		ResourceLabel:        "KMS Alias",
		Tags:                 map[string][]string{},
		ServiceName:          "KMS",
		ListDescriber:        ParallelDescribeRegional(describer.KMSAlias),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_kms_alias"},
		TerraformServiceName: "kms",
		FastDiscovery:        true,
		Summarize:            true,
	},

	"AWS::Lambda::Alias": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Lambda::Alias",
		ResourceLabel:        "Lambda Alias",
		Tags:                 map[string][]string{},
		ServiceName:          "Lambda",
		ListDescriber:        ParallelDescribeRegional(describer.LambdaAlias),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_lambda_alias"},
		TerraformServiceName: "lambda",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Lambda::LambdaLayer": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Lambda::LambdaLayer",
		ResourceLabel:        "Lambda Layer",
		Tags:                 map[string][]string{},
		ServiceName:          "Lambda",
		ListDescriber:        ParallelDescribeRegional(describer.LambdaLayer),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Lambda::LayerVersion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Lambda::LayerVersion",
		ResourceLabel:        "Lambda Layer Version",
		Tags:                 map[string][]string{},
		ServiceName:          "Lambda",
		ListDescriber:        ParallelDescribeRegional(describer.LambdaLayerVersion),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_lambda_layer_version"},
		TerraformServiceName: "lambda",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Lightsail::Instance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Lightsail::Instance",
		ResourceLabel:        "Lightsail Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "Lightsail",
		ListDescriber:        ParallelDescribeRegional(describer.LightsailInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_lightsail_instance"},
		TerraformServiceName: "lightsail",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Macie2::ClassificationJob": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Macie2::ClassificationJob",
		ResourceLabel:        "Macie2 Classification Job",
		Tags:                 map[string][]string{},
		ServiceName:          "Macie2",
		ListDescriber:        ParallelDescribeRegional(describer.Macie2ClassificationJob),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_macie2_classification_job"},
		TerraformServiceName: "macie2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::MediaStore::Container": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::MediaStore::Container",
		ResourceLabel:        "MediaStore Container",
		Tags:                 map[string][]string{},
		ServiceName:          "MediaStore",
		ListDescriber:        ParallelDescribeRegional(describer.MediaStoreContainer),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_media_store_container"},
		TerraformServiceName: "mediastore",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Mgn::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Mgn::Application",
		ResourceLabel:        "MGN Application",
		Tags:                 map[string][]string{},
		ServiceName:          "Mgn",
		ListDescriber:        ParallelDescribeRegional(describer.MGNApplication),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53Resolver::ResolverEndpoint": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53Resolver::ResolverEndpoint",
		ResourceLabel:        "Route53 Resolver Endpoint",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        ParallelDescribeRegional(describer.Route53ResolverResolverEndpoint),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_resolver_endpoint"},
		TerraformServiceName: "route53resolver",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53Domains::Domain": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53Domains::Domain",
		ResourceLabel:        "Route53 Domain",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53Domain),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53domains_registered_domain"},
		TerraformServiceName: "route53domains",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53::Record": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::Record",
		ResourceLabel:        "Route53 Record",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53Record),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_record"},
		TerraformServiceName: "route53",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53::TrafficPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::TrafficPolicy",
		ResourceLabel:        "Route53 Traffic Policy",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53TrafficPolicy),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_traffic_policy"},
		TerraformServiceName: "route53",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Route53::TrafficPolicyInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Route53::TrafficPolicyInstance",
		ResourceLabel:        "Route53 Traffic Policy Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "Route53",
		ListDescriber:        SequentialDescribeGlobal(describer.Route53TrafficPolicyInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_route53_traffic_policy_instance"},
		TerraformServiceName: "route53",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::Model": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::Model",
		ResourceLabel:        "SageMaker Model",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerModel),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sagemaker_model"},
		TerraformServiceName: "sagemaker",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SageMaker::TrainingJob": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SageMaker::TrainingJob",
		ResourceLabel:        "SageMaker Training Job",
		Tags:                 map[string][]string{},
		ServiceName:          "SageMaker",
		ListDescriber:        ParallelDescribeRegional(describer.SageMakerTrainingJob),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::ActionTarget": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::ActionTarget",
		ResourceLabel:        "Security Hub Action Target",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubActionTarget),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_action_target"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::Finding": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::Finding",
		ResourceLabel:        "Security Hub Finding",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubFinding),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::FindingAggregator": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::FindingAggregator",
		ResourceLabel:        "Security Hub Finding Aggregator",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubFindingAggregator),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_finding_aggregator"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::Insight": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::Insight",
		ResourceLabel:        "Security Hub Insight",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubInsight),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_insight"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::Member": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::Member",
		ResourceLabel:        "Security Hub Member",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubMember),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_member"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::Product": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::Product",
		ResourceLabel:        "Security Hub Product",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubProduct),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::StandardsControl": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::StandardsControl",
		ResourceLabel:        "Security Hub Standards Control",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubStandardsControl),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_standards_control"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityHub::StandardsSubscription": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityHub::StandardsSubscription",
		ResourceLabel:        "Security Hub Standards Subscription",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityHub",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityHubStandardsSubscription),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_securityhub_standards_subscription"},
		TerraformServiceName: "securityhub",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityLake::DataLake": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityLake::DataLake",
		ResourceLabel:        "Security Lake Data Lake",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityLake",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityLakeDataLake),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SecurityLake::Subscriber": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SecurityLake::Subscriber",
		ResourceLabel:        "Security Lake Subscriber",
		Tags:                 map[string][]string{},
		ServiceName:          "SecurityLake",
		ListDescriber:        ParallelDescribeRegional(describer.SecurityLakeSubscriber),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Ram::PrincipalAssociation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Ram::PrincipalAssociation",
		ResourceLabel:        "Principal Association",
		Tags:                 map[string][]string{},
		ServiceName:          "Ram",
		ListDescriber:        ParallelDescribeRegional(describer.RamPrincipalAssociation),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ram_principal_association"},
		TerraformServiceName: "ram",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Ram::ResourceAssociation": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Ram::ResourceAssociation",
		ResourceLabel:        "Resource Association",
		Tags:                 map[string][]string{},
		ServiceName:          "Ram",
		ListDescriber:        ParallelDescribeRegional(describer.RamResourceAssociation),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ram_resource_association"},
		TerraformServiceName: "ram",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::RDS::ReservedDBInstance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::RDS::ReservedDBInstance",
		ResourceLabel:        "RDS Reserved DB Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "RDS",
		ListDescriber:        ParallelDescribeRegional(describer.RDSReservedDBInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_rds_reserved_instance"},
		TerraformServiceName: "rds",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Redshift::SubnetGroup": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Redshift::SubnetGroup",
		ResourceLabel:        "Redshift Subnet Group",
		Tags:                 map[string][]string{},
		ServiceName:          "Redshift",
		ListDescriber:        ParallelDescribeRegional(describer.RedshiftSubnetGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_redshift_subnet_group"},
		TerraformServiceName: "redshift",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SeverlessApplicationRepository::Application": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SeverlessApplicationRepository::Application",
		ResourceLabel:        "Serverless Application Repository",
		Tags:                 map[string][]string{},
		ServiceName:          "ServerlessApplicationRepository",
		ListDescriber:        ParallelDescribeRegional(describer.ServerlessApplicationRepositoryApplication),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_serverlessapplicationrepository_application"},
		TerraformServiceName: "serverlessrepo",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::Logs::MetricFilter": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::Logs::MetricFilter",
		ResourceLabel:        "Logs Metric Filter",
		Tags:                 map[string][]string{},
		ServiceName:          "Logs",
		ListDescriber:        ParallelDescribeRegional(describer.CloudWatchLogsMetricFilter),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceQuotas::ServiceQuotaChangeRequest": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceQuotas::ServiceQuotaChangeRequest",
		ResourceLabel:        "Service Quota Change Request",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceQuotas",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceQuotasServiceQuotaChangeRequest),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceQuotas::Service": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceQuotas::Service",
		ResourceLabel:        "Service Quota Service",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceQuotas",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceQuotasService),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::VPCEndpointService": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::VPCEndpointService",
		ResourceLabel:        "EC2 VPC Endpoint Service",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2VPCEndpointService),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_vpc_endpoint_service"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::LaunchTemplate": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::LaunchTemplate",
		ResourceLabel:        "EC2 Launch Template",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2LaunchTemplate),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2LaunchTemplate),
		TerraformName:        []string{"aws_launch_template"},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::EC2::LaunchTemplateVersion": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::EC2::LaunchTemplateVersion",
		ResourceLabel:        "EC2 Launch Template Version",
		Tags:                 map[string][]string{},
		ServiceName:          "EC2",
		ListDescriber:        ParallelDescribeRegional(describer.EC2LaunchTemplateVersion),
		GetDescriber:         ParallelDescribeRegionalSingleResource(describer.GetEC2LaunchTemplateVersion),
		TerraformName:        []string{},
		TerraformServiceName: "ec2",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SNS::Subscription": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SNS::Subscription",
		ResourceLabel:        "SNS Subscription",
		Tags:                 map[string][]string{},
		ServiceName:          "SNS",
		ListDescriber:        ParallelDescribeRegional(describer.SNSSubscription),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_sns_topic_subscription"},
		TerraformServiceName: "sns",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::S3::AccountSetting": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::S3::AccountSetting",
		ResourceLabel:        "S3 Account Setting",
		Tags:                 map[string][]string{},
		ServiceName:          "S3",
		ListDescriber:        SequentialDescribeGlobal(describer.S3AccountSetting),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::ManagedInstanceCompliance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::ManagedInstanceCompliance",
		ResourceLabel:        "SSM Managed Instance Compliance",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMManagedInstanceCompliance),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSM::ManagedInstancePatchState": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSM::ManagedInstancePatchState",
		ResourceLabel:        "SSM Managed Instance Patch State",
		Tags:                 map[string][]string{},
		ServiceName:          "SSM",
		ListDescriber:        ParallelDescribeRegional(describer.SSMManagedInstancePatchState),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSOAdmin::AccountAssignment": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSOAdmin::AccountAssignment",
		ResourceLabel:        "SSO Admin Account Assignment",
		Tags:                 map[string][]string{},
		ServiceName:          "SSOAdmin",
		ListDescriber:        ParallelDescribeRegional(describer.SSOAdminAccountAssignment),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ssoadmin_account_assignment"},
		TerraformServiceName: "ssoadmin",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSOAdmin::UserEffectiveAccess": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSOAdmin::UserEffectiveAccess",
		ResourceLabel:        "User Effective Access",
		Tags:                 map[string][]string{},
		ServiceName:          "SSOAdmin",
		ListDescriber:        ParallelDescribeRegional(describer.UserEffectiveAccess),
		GetDescriber:         nil,
		TerraformName:        []string{},
		TerraformServiceName: "ssoadmin",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSOAdmin::Instance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSOAdmin::Instance",
		ResourceLabel:        "SSO Admin Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "SSOAdmin",
		ListDescriber:        ParallelDescribeRegional(describer.SSOAdminInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ssoadmin_instance"},
		TerraformServiceName: "ssoadmin",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSOAdmin::PermissionSet": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSOAdmin::PermissionSet",
		ResourceLabel:        "SSO Admin Permission Set",
		Tags:                 map[string][]string{},
		ServiceName:          "SSOAdmin",
		ListDescriber:        ParallelDescribeRegional(describer.SSOAdminPermissionSet),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ssoadmin_permission_set"},
		TerraformServiceName: "ssoadmin",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::SSOAdmin::AttachedManagedPolicy": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::SSOAdmin::AttachedManagedPolicy",
		ResourceLabel:        "SSO Admin Managed Policy Attachment",
		Tags:                 map[string][]string{},
		ServiceName:          "SSOAdmin",
		ListDescriber:        ParallelDescribeRegional(describer.SSOAdminManagedPolicyAttachment),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_ssoadmin_managed_policy_attachment"},
		TerraformServiceName: "ssoadmin",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceDiscovery::Service": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceDiscovery::Service",
		ResourceLabel:        "Service Discovery Service",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceDiscovery",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceDiscoveryService),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_service_discovery_service"},
		TerraformServiceName: "service_discovery",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceDiscovery::Namespace": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceDiscovery::Namespace",
		ResourceLabel:        "Service Discovery Namespace",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceDiscovery",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceDiscoveryNamespace),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_service_discovery_http_namespace", "aws_service_discovery_dns_namespace", "aws_service_discovery_private_dns_namespace", "aws_service_discovery_public_dns_namespace"},
		TerraformServiceName: "service_discovery",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceDiscovery::Instance": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceDiscovery::Instance",
		ResourceLabel:        "Service Discovery Instance",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceDiscovery",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceDiscoveryInstance),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_service_discovery_instance"},
		TerraformServiceName: "service_discovery",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceCatalog::Portfolio": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceCatalog::Portfolio",
		ResourceLabel:        "Service Catalog Portfolio",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceCatalog",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceCatalogPortfolio),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_servicecatalog_portfolio"},
		TerraformServiceName: "servicecatalog",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::ServiceCatalog::Product": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::ServiceCatalog::Product",
		ResourceLabel:        "",
		Tags:                 map[string][]string{},
		ServiceName:          "ServiceCatalog",
		ListDescriber:        ParallelDescribeRegional(describer.ServiceCatalogProduct),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_servicecatalog_product"},
		TerraformServiceName: "servicecatalog",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IdentityStore::User": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IdentityStore::User",
		ResourceLabel:        "Identity Store User",
		Tags:                 map[string][]string{},
		ServiceName:          "IdentityStore",
		ListDescriber:        ParallelDescribeRegional(describer.IdentityStoreUser),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_identitystore_user"},
		TerraformServiceName: "identitystore",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IdentityStore::Group": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IdentityStore::Group",
		ResourceLabel:        "Identity Store Group",
		Tags:                 map[string][]string{},
		ServiceName:          "IdentityStore",
		ListDescriber:        ParallelDescribeRegional(describer.IdentityStoreGroup),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_identitystore_group"},
		TerraformServiceName: "identitystore",
		FastDiscovery:        false,
		Summarize:            true,
	},

	"AWS::IdentityStore::GroupMembership": {
		Connector:            source.CloudAWS,
		ResourceName:         "AWS::IdentityStore::GroupMembership",
		ResourceLabel:        "Identity Store Group Membership",
		Tags:                 map[string][]string{},
		ServiceName:          "IdentityStore",
		ListDescriber:        ParallelDescribeRegional(describer.IdentityStoreGroupMembership),
		GetDescriber:         nil,
		TerraformName:        []string{"aws_identitystore_group_membership"},
		TerraformServiceName: "identitystore",
		FastDiscovery:        false,
		Summarize:            true,
	},
}
